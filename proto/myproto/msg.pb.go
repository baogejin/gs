// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: msg.proto

package myproto

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgId int32

const (
	MsgId_Msg_None             MsgId = 0
	MsgId_Msg_RegisterREQ      MsgId = 1
	MsgId_Msg_RegisterACK      MsgId = 2
	MsgId_Msg_LoginREQ         MsgId = 3
	MsgId_Msg_LoginACK         MsgId = 4
	MsgId_Msg_CreateRoleREQ    MsgId = 5
	MsgId_Msg_CreateRoleACK    MsgId = 6
	MsgId_Msg_EnterGameREQ     MsgId = 7
	MsgId_Msg_EnterGameACK     MsgId = 8
	MsgId_Msg_LogoutREQ        MsgId = 9
	MsgId_Msg_LogoutACK        MsgId = 10
	MsgId_Msg_KickPUSH         MsgId = 11
	MsgId_Msg_ChatREQ          MsgId = 12
	MsgId_Msg_ChatACK          MsgId = 13
	MsgId_Msg_ChatPUSH         MsgId = 14
	MsgId_Msg_GMREQ            MsgId = 15
	MsgId_Msg_GMACK            MsgId = 16
	MsgId_Msg_ItemUpdatePUSH   MsgId = 17
	MsgId_Msg_CreateBattleREQ  MsgId = 100
	MsgId_Msg_CreateBattleACK  MsgId = 101
	MsgId_Msg_BattleInfoPUSH   MsgId = 102
	MsgId_Msg_BattleStartPUSH  MsgId = 103
	MsgId_Msg_BattleActionPUSH MsgId = 104
	MsgId_Msg_BattleFinishPUSH MsgId = 105
	MsgId_Msg_BattleStartREQ   MsgId = 106
	MsgId_Msg_BattleStartACK   MsgId = 107
)

var MsgId_name = map[int32]string{
	0:   "Msg_None",
	1:   "Msg_RegisterREQ",
	2:   "Msg_RegisterACK",
	3:   "Msg_LoginREQ",
	4:   "Msg_LoginACK",
	5:   "Msg_CreateRoleREQ",
	6:   "Msg_CreateRoleACK",
	7:   "Msg_EnterGameREQ",
	8:   "Msg_EnterGameACK",
	9:   "Msg_LogoutREQ",
	10:  "Msg_LogoutACK",
	11:  "Msg_KickPUSH",
	12:  "Msg_ChatREQ",
	13:  "Msg_ChatACK",
	14:  "Msg_ChatPUSH",
	15:  "Msg_GMREQ",
	16:  "Msg_GMACK",
	17:  "Msg_ItemUpdatePUSH",
	100: "Msg_CreateBattleREQ",
	101: "Msg_CreateBattleACK",
	102: "Msg_BattleInfoPUSH",
	103: "Msg_BattleStartPUSH",
	104: "Msg_BattleActionPUSH",
	105: "Msg_BattleFinishPUSH",
	106: "Msg_BattleStartREQ",
	107: "Msg_BattleStartACK",
}

var MsgId_value = map[string]int32{
	"Msg_None":             0,
	"Msg_RegisterREQ":      1,
	"Msg_RegisterACK":      2,
	"Msg_LoginREQ":         3,
	"Msg_LoginACK":         4,
	"Msg_CreateRoleREQ":    5,
	"Msg_CreateRoleACK":    6,
	"Msg_EnterGameREQ":     7,
	"Msg_EnterGameACK":     8,
	"Msg_LogoutREQ":        9,
	"Msg_LogoutACK":        10,
	"Msg_KickPUSH":         11,
	"Msg_ChatREQ":          12,
	"Msg_ChatACK":          13,
	"Msg_ChatPUSH":         14,
	"Msg_GMREQ":            15,
	"Msg_GMACK":            16,
	"Msg_ItemUpdatePUSH":   17,
	"Msg_CreateBattleREQ":  100,
	"Msg_CreateBattleACK":  101,
	"Msg_BattleInfoPUSH":   102,
	"Msg_BattleStartPUSH":  103,
	"Msg_BattleActionPUSH": 104,
	"Msg_BattleFinishPUSH": 105,
	"Msg_BattleStartREQ":   106,
	"Msg_BattleStartACK":   107,
}

func (x MsgId) String() string {
	return proto.EnumName(MsgId_name, int32(x))
}

func (MsgId) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{0}
}

type ResultCode int32

const (
	ResultCode_Success            ResultCode = 0
	ResultCode_MsgErr             ResultCode = 1
	ResultCode_AccountExist       ResultCode = 101
	ResultCode_AccountNotExist    ResultCode = 102
	ResultCode_RoleNameExist      ResultCode = 103
	ResultCode_PasswordErr        ResultCode = 104
	ResultCode_AlreadyLogin       ResultCode = 105
	ResultCode_AccountEmpty       ResultCode = 106
	ResultCode_PasswordEmpty      ResultCode = 107
	ResultCode_AccountErr         ResultCode = 108
	ResultCode_AlreadyHasRole     ResultCode = 109
	ResultCode_NeedLogin          ResultCode = 110
	ResultCode_RoleNameIllegal    ResultCode = 111
	ResultCode_CreateRoleFaild    ResultCode = 112
	ResultCode_EnterGameFailed    ResultCode = 113
	ResultCode_PlayerNotFound     ResultCode = 114
	ResultCode_GMCmdNotFound      ResultCode = 115
	ResultCode_GMCmdParamErr      ResultCode = 116
	ResultCode_GMCmdExecErr       ResultCode = 117
	ResultCode_CreateBattleFailed ResultCode = 118
)

var ResultCode_name = map[int32]string{
	0:   "Success",
	1:   "MsgErr",
	101: "AccountExist",
	102: "AccountNotExist",
	103: "RoleNameExist",
	104: "PasswordErr",
	105: "AlreadyLogin",
	106: "AccountEmpty",
	107: "PasswordEmpty",
	108: "AccountErr",
	109: "AlreadyHasRole",
	110: "NeedLogin",
	111: "RoleNameIllegal",
	112: "CreateRoleFaild",
	113: "EnterGameFailed",
	114: "PlayerNotFound",
	115: "GMCmdNotFound",
	116: "GMCmdParamErr",
	117: "GMCmdExecErr",
	118: "CreateBattleFailed",
}

var ResultCode_value = map[string]int32{
	"Success":            0,
	"MsgErr":             1,
	"AccountExist":       101,
	"AccountNotExist":    102,
	"RoleNameExist":      103,
	"PasswordErr":        104,
	"AlreadyLogin":       105,
	"AccountEmpty":       106,
	"PasswordEmpty":      107,
	"AccountErr":         108,
	"AlreadyHasRole":     109,
	"NeedLogin":          110,
	"RoleNameIllegal":    111,
	"CreateRoleFaild":    112,
	"EnterGameFailed":    113,
	"PlayerNotFound":     114,
	"GMCmdNotFound":      115,
	"GMCmdParamErr":      116,
	"GMCmdExecErr":       117,
	"CreateBattleFailed": 118,
}

func (x ResultCode) String() string {
	return proto.EnumName(ResultCode_name, int32(x))
}

func (ResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{1}
}

type UnitType int32

const (
	UnitType_UnitMonster UnitType = 0
	UnitType_UnitPlayer  UnitType = 1
)

var UnitType_name = map[int32]string{
	0: "UnitMonster",
	1: "UnitPlayer",
}

var UnitType_value = map[string]int32{
	"UnitMonster": 0,
	"UnitPlayer":  1,
}

func (x UnitType) String() string {
	return proto.EnumName(UnitType_name, int32(x))
}

func (UnitType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{2}
}

type TargetType int32

const (
	TargetType_TargetNone        TargetType = 0
	TargetType_EnemySingle       TargetType = 1
	TargetType_EnemySingleFront  TargetType = 2
	TargetType_EnemySingleBehind TargetType = 3
	TargetType_EnemyAll          TargetType = 4
	TargetType_EnemyFrontAll     TargetType = 5
	TargetType_EnemyBehindAll    TargetType = 6
	TargetType_TargetSelf        TargetType = 10
	TargetType_AllySingle        TargetType = 11
	TargetType_AllySingleFront   TargetType = 12
	TargetType_AllySingleBehind  TargetType = 13
	TargetType_AllyAll           TargetType = 14
	TargetType_AllyFrontAll      TargetType = 15
	TargetType_AllyBehindAll     TargetType = 16
)

var TargetType_name = map[int32]string{
	0:  "TargetNone",
	1:  "EnemySingle",
	2:  "EnemySingleFront",
	3:  "EnemySingleBehind",
	4:  "EnemyAll",
	5:  "EnemyFrontAll",
	6:  "EnemyBehindAll",
	10: "TargetSelf",
	11: "AllySingle",
	12: "AllySingleFront",
	13: "AllySingleBehind",
	14: "AllyAll",
	15: "AllyFrontAll",
	16: "AllyBehindAll",
}

var TargetType_value = map[string]int32{
	"TargetNone":        0,
	"EnemySingle":       1,
	"EnemySingleFront":  2,
	"EnemySingleBehind": 3,
	"EnemyAll":          4,
	"EnemyFrontAll":     5,
	"EnemyBehindAll":    6,
	"TargetSelf":        10,
	"AllySingle":        11,
	"AllySingleFront":   12,
	"AllySingleBehind":  13,
	"AllyAll":           14,
	"AllyFrontAll":      15,
	"AllyBehindAll":     16,
}

func (x TargetType) String() string {
	return proto.EnumName(TargetType_name, int32(x))
}

func (TargetType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{3}
}

type ItemType int32

const (
	ItemType_ItemTypeNone   ItemType = 0
	ItemType_UnoccupiedItem ItemType = 1
	ItemType_StackItem      ItemType = 2
	ItemType_UnstackItem    ItemType = 3
	ItemType_EquipItem      ItemType = 4
)

var ItemType_name = map[int32]string{
	0: "ItemTypeNone",
	1: "UnoccupiedItem",
	2: "StackItem",
	3: "UnstackItem",
	4: "EquipItem",
}

var ItemType_value = map[string]int32{
	"ItemTypeNone":   0,
	"UnoccupiedItem": 1,
	"StackItem":      2,
	"UnstackItem":    3,
	"EquipItem":      4,
}

func (x ItemType) String() string {
	return proto.EnumName(ItemType_name, int32(x))
}

func (ItemType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{4}
}

type Quality int32

const (
	Quality_QualityNone Quality = 0
	Quality_White       Quality = 1
	Quality_Green       Quality = 2
	Quality_Blue        Quality = 3
	Quality_Purple      Quality = 4
	Quality_Orange      Quality = 5
)

var Quality_name = map[int32]string{
	0: "QualityNone",
	1: "White",
	2: "Green",
	3: "Blue",
	4: "Purple",
	5: "Orange",
}

var Quality_value = map[string]int32{
	"QualityNone": 0,
	"White":       1,
	"Green":       2,
	"Blue":        3,
	"Purple":      4,
	"Orange":      5,
}

func (x Quality) String() string {
	return proto.EnumName(Quality_name, int32(x))
}

func (Quality) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{5}
}

type ItemUpdateType int32

const (
	ItemUpdateType_ItemUpdateNone ItemUpdateType = 0
	ItemUpdateType_ItemAdd        ItemUpdateType = 1
	ItemUpdateType_ItemDel        ItemUpdateType = 2
)

var ItemUpdateType_name = map[int32]string{
	0: "ItemUpdateNone",
	1: "ItemAdd",
	2: "ItemDel",
}

var ItemUpdateType_value = map[string]int32{
	"ItemUpdateNone": 0,
	"ItemAdd":        1,
	"ItemDel":        2,
}

func (x ItemUpdateType) String() string {
	return proto.EnumName(ItemUpdateType_name, int32(x))
}

func (ItemUpdateType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{6}
}

type RegisterREQ struct {
	Account  string `protobuf:"bytes,1,opt,name=Account,proto3" json:"Account,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=Password,proto3" json:"Password,omitempty"`
}

func (m *RegisterREQ) Reset()         { *m = RegisterREQ{} }
func (m *RegisterREQ) String() string { return proto.CompactTextString(m) }
func (*RegisterREQ) ProtoMessage()    {}
func (*RegisterREQ) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{0}
}
func (m *RegisterREQ) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterREQ) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterREQ.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterREQ) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterREQ.Merge(m, src)
}
func (m *RegisterREQ) XXX_Size() int {
	return m.Size()
}
func (m *RegisterREQ) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterREQ.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterREQ proto.InternalMessageInfo

func (m *RegisterREQ) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *RegisterREQ) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type RegisterACK struct {
	Ret ResultCode `protobuf:"varint,1,opt,name=Ret,proto3,enum=myproto.ResultCode" json:"Ret,omitempty"`
}

func (m *RegisterACK) Reset()         { *m = RegisterACK{} }
func (m *RegisterACK) String() string { return proto.CompactTextString(m) }
func (*RegisterACK) ProtoMessage()    {}
func (*RegisterACK) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{1}
}
func (m *RegisterACK) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterACK) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterACK.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterACK) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterACK.Merge(m, src)
}
func (m *RegisterACK) XXX_Size() int {
	return m.Size()
}
func (m *RegisterACK) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterACK.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterACK proto.InternalMessageInfo

func (m *RegisterACK) GetRet() ResultCode {
	if m != nil {
		return m.Ret
	}
	return ResultCode_Success
}

type LoginREQ struct {
	Account  string `protobuf:"bytes,1,opt,name=Account,proto3" json:"Account,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=Password,proto3" json:"Password,omitempty"`
}

func (m *LoginREQ) Reset()         { *m = LoginREQ{} }
func (m *LoginREQ) String() string { return proto.CompactTextString(m) }
func (*LoginREQ) ProtoMessage()    {}
func (*LoginREQ) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{2}
}
func (m *LoginREQ) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginREQ) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginREQ.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoginREQ) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginREQ.Merge(m, src)
}
func (m *LoginREQ) XXX_Size() int {
	return m.Size()
}
func (m *LoginREQ) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginREQ.DiscardUnknown(m)
}

var xxx_messageInfo_LoginREQ proto.InternalMessageInfo

func (m *LoginREQ) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *LoginREQ) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type LoginACK struct {
	Ret     ResultCode `protobuf:"varint,1,opt,name=Ret,proto3,enum=myproto.ResultCode" json:"Ret,omitempty"`
	Uid     uint64     `protobuf:"varint,2,opt,name=Uid,proto3" json:"Uid,omitempty"`
	HasRole bool       `protobuf:"varint,3,opt,name=HasRole,proto3" json:"HasRole,omitempty"`
}

func (m *LoginACK) Reset()         { *m = LoginACK{} }
func (m *LoginACK) String() string { return proto.CompactTextString(m) }
func (*LoginACK) ProtoMessage()    {}
func (*LoginACK) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{3}
}
func (m *LoginACK) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginACK) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginACK.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoginACK) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginACK.Merge(m, src)
}
func (m *LoginACK) XXX_Size() int {
	return m.Size()
}
func (m *LoginACK) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginACK.DiscardUnknown(m)
}

var xxx_messageInfo_LoginACK proto.InternalMessageInfo

func (m *LoginACK) GetRet() ResultCode {
	if m != nil {
		return m.Ret
	}
	return ResultCode_Success
}

func (m *LoginACK) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *LoginACK) GetHasRole() bool {
	if m != nil {
		return m.HasRole
	}
	return false
}

type PlayerBagInfo struct {
	Unoccupied   map[int32]int64  `protobuf:"bytes,1,rep,name=Unoccupied,proto3" json:"Unoccupied,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	StackItems   map[int32]*Item  `protobuf:"bytes,2,rep,name=StackItems,proto3" json:"StackItems,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	UnstackItems map[uint64]*Item `protobuf:"bytes,3,rep,name=UnstackItems,proto3" json:"UnstackItems,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *PlayerBagInfo) Reset()         { *m = PlayerBagInfo{} }
func (m *PlayerBagInfo) String() string { return proto.CompactTextString(m) }
func (*PlayerBagInfo) ProtoMessage()    {}
func (*PlayerBagInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{4}
}
func (m *PlayerBagInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerBagInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerBagInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerBagInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerBagInfo.Merge(m, src)
}
func (m *PlayerBagInfo) XXX_Size() int {
	return m.Size()
}
func (m *PlayerBagInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerBagInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerBagInfo proto.InternalMessageInfo

func (m *PlayerBagInfo) GetUnoccupied() map[int32]int64 {
	if m != nil {
		return m.Unoccupied
	}
	return nil
}

func (m *PlayerBagInfo) GetStackItems() map[int32]*Item {
	if m != nil {
		return m.StackItems
	}
	return nil
}

func (m *PlayerBagInfo) GetUnstackItems() map[uint64]*Item {
	if m != nil {
		return m.UnstackItems
	}
	return nil
}

type PlayerInfo struct {
	Uid     uint64         `protobuf:"varint,1,opt,name=Uid,proto3" json:"Uid,omitempty"`
	Name    string         `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	BagInfo *PlayerBagInfo `protobuf:"bytes,3,opt,name=BagInfo,proto3" json:"BagInfo,omitempty"`
}

func (m *PlayerInfo) Reset()         { *m = PlayerInfo{} }
func (m *PlayerInfo) String() string { return proto.CompactTextString(m) }
func (*PlayerInfo) ProtoMessage()    {}
func (*PlayerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{5}
}
func (m *PlayerInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerInfo.Merge(m, src)
}
func (m *PlayerInfo) XXX_Size() int {
	return m.Size()
}
func (m *PlayerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerInfo proto.InternalMessageInfo

func (m *PlayerInfo) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *PlayerInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PlayerInfo) GetBagInfo() *PlayerBagInfo {
	if m != nil {
		return m.BagInfo
	}
	return nil
}

type CreateRoleREQ struct {
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (m *CreateRoleREQ) Reset()         { *m = CreateRoleREQ{} }
func (m *CreateRoleREQ) String() string { return proto.CompactTextString(m) }
func (*CreateRoleREQ) ProtoMessage()    {}
func (*CreateRoleREQ) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{6}
}
func (m *CreateRoleREQ) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateRoleREQ) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateRoleREQ.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateRoleREQ) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRoleREQ.Merge(m, src)
}
func (m *CreateRoleREQ) XXX_Size() int {
	return m.Size()
}
func (m *CreateRoleREQ) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRoleREQ.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRoleREQ proto.InternalMessageInfo

func (m *CreateRoleREQ) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type CreateRoleACK struct {
	Ret ResultCode `protobuf:"varint,1,opt,name=Ret,proto3,enum=myproto.ResultCode" json:"Ret,omitempty"`
}

func (m *CreateRoleACK) Reset()         { *m = CreateRoleACK{} }
func (m *CreateRoleACK) String() string { return proto.CompactTextString(m) }
func (*CreateRoleACK) ProtoMessage()    {}
func (*CreateRoleACK) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{7}
}
func (m *CreateRoleACK) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateRoleACK) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateRoleACK.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateRoleACK) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRoleACK.Merge(m, src)
}
func (m *CreateRoleACK) XXX_Size() int {
	return m.Size()
}
func (m *CreateRoleACK) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRoleACK.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRoleACK proto.InternalMessageInfo

func (m *CreateRoleACK) GetRet() ResultCode {
	if m != nil {
		return m.Ret
	}
	return ResultCode_Success
}

type EnterGameREQ struct {
}

func (m *EnterGameREQ) Reset()         { *m = EnterGameREQ{} }
func (m *EnterGameREQ) String() string { return proto.CompactTextString(m) }
func (*EnterGameREQ) ProtoMessage()    {}
func (*EnterGameREQ) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{8}
}
func (m *EnterGameREQ) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnterGameREQ) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EnterGameREQ.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EnterGameREQ) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnterGameREQ.Merge(m, src)
}
func (m *EnterGameREQ) XXX_Size() int {
	return m.Size()
}
func (m *EnterGameREQ) XXX_DiscardUnknown() {
	xxx_messageInfo_EnterGameREQ.DiscardUnknown(m)
}

var xxx_messageInfo_EnterGameREQ proto.InternalMessageInfo

type EnterGameACK struct {
	Ret  ResultCode  `protobuf:"varint,1,opt,name=Ret,proto3,enum=myproto.ResultCode" json:"Ret,omitempty"`
	Info *PlayerInfo `protobuf:"bytes,2,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (m *EnterGameACK) Reset()         { *m = EnterGameACK{} }
func (m *EnterGameACK) String() string { return proto.CompactTextString(m) }
func (*EnterGameACK) ProtoMessage()    {}
func (*EnterGameACK) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{9}
}
func (m *EnterGameACK) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnterGameACK) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EnterGameACK.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EnterGameACK) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnterGameACK.Merge(m, src)
}
func (m *EnterGameACK) XXX_Size() int {
	return m.Size()
}
func (m *EnterGameACK) XXX_DiscardUnknown() {
	xxx_messageInfo_EnterGameACK.DiscardUnknown(m)
}

var xxx_messageInfo_EnterGameACK proto.InternalMessageInfo

func (m *EnterGameACK) GetRet() ResultCode {
	if m != nil {
		return m.Ret
	}
	return ResultCode_Success
}

func (m *EnterGameACK) GetInfo() *PlayerInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

type LogoutREQ struct {
}

func (m *LogoutREQ) Reset()         { *m = LogoutREQ{} }
func (m *LogoutREQ) String() string { return proto.CompactTextString(m) }
func (*LogoutREQ) ProtoMessage()    {}
func (*LogoutREQ) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{10}
}
func (m *LogoutREQ) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogoutREQ) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogoutREQ.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogoutREQ) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogoutREQ.Merge(m, src)
}
func (m *LogoutREQ) XXX_Size() int {
	return m.Size()
}
func (m *LogoutREQ) XXX_DiscardUnknown() {
	xxx_messageInfo_LogoutREQ.DiscardUnknown(m)
}

var xxx_messageInfo_LogoutREQ proto.InternalMessageInfo

type LogoutACK struct {
	Ret ResultCode `protobuf:"varint,1,opt,name=Ret,proto3,enum=myproto.ResultCode" json:"Ret,omitempty"`
}

func (m *LogoutACK) Reset()         { *m = LogoutACK{} }
func (m *LogoutACK) String() string { return proto.CompactTextString(m) }
func (*LogoutACK) ProtoMessage()    {}
func (*LogoutACK) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{11}
}
func (m *LogoutACK) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogoutACK) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogoutACK.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogoutACK) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogoutACK.Merge(m, src)
}
func (m *LogoutACK) XXX_Size() int {
	return m.Size()
}
func (m *LogoutACK) XXX_DiscardUnknown() {
	xxx_messageInfo_LogoutACK.DiscardUnknown(m)
}

var xxx_messageInfo_LogoutACK proto.InternalMessageInfo

func (m *LogoutACK) GetRet() ResultCode {
	if m != nil {
		return m.Ret
	}
	return ResultCode_Success
}

type KickPUSH struct {
}

func (m *KickPUSH) Reset()         { *m = KickPUSH{} }
func (m *KickPUSH) String() string { return proto.CompactTextString(m) }
func (*KickPUSH) ProtoMessage()    {}
func (*KickPUSH) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{12}
}
func (m *KickPUSH) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KickPUSH) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KickPUSH.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KickPUSH) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KickPUSH.Merge(m, src)
}
func (m *KickPUSH) XXX_Size() int {
	return m.Size()
}
func (m *KickPUSH) XXX_DiscardUnknown() {
	xxx_messageInfo_KickPUSH.DiscardUnknown(m)
}

var xxx_messageInfo_KickPUSH proto.InternalMessageInfo

type ChatREQ struct {
	Msg string `protobuf:"bytes,1,opt,name=Msg,proto3" json:"Msg,omitempty"`
}

func (m *ChatREQ) Reset()         { *m = ChatREQ{} }
func (m *ChatREQ) String() string { return proto.CompactTextString(m) }
func (*ChatREQ) ProtoMessage()    {}
func (*ChatREQ) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{13}
}
func (m *ChatREQ) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChatREQ) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChatREQ.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChatREQ) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatREQ.Merge(m, src)
}
func (m *ChatREQ) XXX_Size() int {
	return m.Size()
}
func (m *ChatREQ) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatREQ.DiscardUnknown(m)
}

var xxx_messageInfo_ChatREQ proto.InternalMessageInfo

func (m *ChatREQ) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type ChatACK struct {
	Ret ResultCode `protobuf:"varint,1,opt,name=Ret,proto3,enum=myproto.ResultCode" json:"Ret,omitempty"`
}

func (m *ChatACK) Reset()         { *m = ChatACK{} }
func (m *ChatACK) String() string { return proto.CompactTextString(m) }
func (*ChatACK) ProtoMessage()    {}
func (*ChatACK) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{14}
}
func (m *ChatACK) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChatACK) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChatACK.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChatACK) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatACK.Merge(m, src)
}
func (m *ChatACK) XXX_Size() int {
	return m.Size()
}
func (m *ChatACK) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatACK.DiscardUnknown(m)
}

var xxx_messageInfo_ChatACK proto.InternalMessageInfo

func (m *ChatACK) GetRet() ResultCode {
	if m != nil {
		return m.Ret
	}
	return ResultCode_Success
}

type ChatPUSH struct {
	Uid  uint64 `protobuf:"varint,1,opt,name=Uid,proto3" json:"Uid,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Msg  string `protobuf:"bytes,3,opt,name=Msg,proto3" json:"Msg,omitempty"`
}

func (m *ChatPUSH) Reset()         { *m = ChatPUSH{} }
func (m *ChatPUSH) String() string { return proto.CompactTextString(m) }
func (*ChatPUSH) ProtoMessage()    {}
func (*ChatPUSH) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{15}
}
func (m *ChatPUSH) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChatPUSH) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChatPUSH.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChatPUSH) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatPUSH.Merge(m, src)
}
func (m *ChatPUSH) XXX_Size() int {
	return m.Size()
}
func (m *ChatPUSH) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatPUSH.DiscardUnknown(m)
}

var xxx_messageInfo_ChatPUSH proto.InternalMessageInfo

func (m *ChatPUSH) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *ChatPUSH) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ChatPUSH) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type Item struct {
	Id     uint64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	ItemId int32  `protobuf:"varint,2,opt,name=ItemId,proto3" json:"ItemId,omitempty"`
	Num    int64  `protobuf:"varint,3,opt,name=Num,proto3" json:"Num,omitempty"`
}

func (m *Item) Reset()         { *m = Item{} }
func (m *Item) String() string { return proto.CompactTextString(m) }
func (*Item) ProtoMessage()    {}
func (*Item) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{16}
}
func (m *Item) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Item) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Item.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Item) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Item.Merge(m, src)
}
func (m *Item) XXX_Size() int {
	return m.Size()
}
func (m *Item) XXX_DiscardUnknown() {
	xxx_messageInfo_Item.DiscardUnknown(m)
}

var xxx_messageInfo_Item proto.InternalMessageInfo

func (m *Item) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Item) GetItemId() int32 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

func (m *Item) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

type GMREQ struct {
	Cmd string `protobuf:"bytes,1,opt,name=Cmd,proto3" json:"Cmd,omitempty"`
}

func (m *GMREQ) Reset()         { *m = GMREQ{} }
func (m *GMREQ) String() string { return proto.CompactTextString(m) }
func (*GMREQ) ProtoMessage()    {}
func (*GMREQ) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{17}
}
func (m *GMREQ) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GMREQ) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GMREQ.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GMREQ) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GMREQ.Merge(m, src)
}
func (m *GMREQ) XXX_Size() int {
	return m.Size()
}
func (m *GMREQ) XXX_DiscardUnknown() {
	xxx_messageInfo_GMREQ.DiscardUnknown(m)
}

var xxx_messageInfo_GMREQ proto.InternalMessageInfo

func (m *GMREQ) GetCmd() string {
	if m != nil {
		return m.Cmd
	}
	return ""
}

type GMACK struct {
	Ret ResultCode `protobuf:"varint,1,opt,name=Ret,proto3,enum=myproto.ResultCode" json:"Ret,omitempty"`
}

func (m *GMACK) Reset()         { *m = GMACK{} }
func (m *GMACK) String() string { return proto.CompactTextString(m) }
func (*GMACK) ProtoMessage()    {}
func (*GMACK) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{18}
}
func (m *GMACK) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GMACK) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GMACK.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GMACK) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GMACK.Merge(m, src)
}
func (m *GMACK) XXX_Size() int {
	return m.Size()
}
func (m *GMACK) XXX_DiscardUnknown() {
	xxx_messageInfo_GMACK.DiscardUnknown(m)
}

var xxx_messageInfo_GMACK proto.InternalMessageInfo

func (m *GMACK) GetRet() ResultCode {
	if m != nil {
		return m.Ret
	}
	return ResultCode_Success
}

type ItemUpdatePUSH struct {
	UpdateType ItemUpdateType `protobuf:"varint,1,opt,name=UpdateType,proto3,enum=myproto.ItemUpdateType" json:"UpdateType,omitempty"`
	Items      []*Item        `protobuf:"bytes,2,rep,name=Items,proto3" json:"Items,omitempty"`
}

func (m *ItemUpdatePUSH) Reset()         { *m = ItemUpdatePUSH{} }
func (m *ItemUpdatePUSH) String() string { return proto.CompactTextString(m) }
func (*ItemUpdatePUSH) ProtoMessage()    {}
func (*ItemUpdatePUSH) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{19}
}
func (m *ItemUpdatePUSH) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ItemUpdatePUSH) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ItemUpdatePUSH.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ItemUpdatePUSH) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ItemUpdatePUSH.Merge(m, src)
}
func (m *ItemUpdatePUSH) XXX_Size() int {
	return m.Size()
}
func (m *ItemUpdatePUSH) XXX_DiscardUnknown() {
	xxx_messageInfo_ItemUpdatePUSH.DiscardUnknown(m)
}

var xxx_messageInfo_ItemUpdatePUSH proto.InternalMessageInfo

func (m *ItemUpdatePUSH) GetUpdateType() ItemUpdateType {
	if m != nil {
		return m.UpdateType
	}
	return ItemUpdateType_ItemUpdateNone
}

func (m *ItemUpdatePUSH) GetItems() []*Item {
	if m != nil {
		return m.Items
	}
	return nil
}

type CreateBattleREQ struct {
	LevelId int32 `protobuf:"varint,1,opt,name=LevelId,proto3" json:"LevelId,omitempty"`
}

func (m *CreateBattleREQ) Reset()         { *m = CreateBattleREQ{} }
func (m *CreateBattleREQ) String() string { return proto.CompactTextString(m) }
func (*CreateBattleREQ) ProtoMessage()    {}
func (*CreateBattleREQ) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{20}
}
func (m *CreateBattleREQ) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateBattleREQ) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateBattleREQ.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateBattleREQ) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateBattleREQ.Merge(m, src)
}
func (m *CreateBattleREQ) XXX_Size() int {
	return m.Size()
}
func (m *CreateBattleREQ) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateBattleREQ.DiscardUnknown(m)
}

var xxx_messageInfo_CreateBattleREQ proto.InternalMessageInfo

func (m *CreateBattleREQ) GetLevelId() int32 {
	if m != nil {
		return m.LevelId
	}
	return 0
}

type CreateBattleACK struct {
	Ret ResultCode `protobuf:"varint,1,opt,name=Ret,proto3,enum=myproto.ResultCode" json:"Ret,omitempty"`
}

func (m *CreateBattleACK) Reset()         { *m = CreateBattleACK{} }
func (m *CreateBattleACK) String() string { return proto.CompactTextString(m) }
func (*CreateBattleACK) ProtoMessage()    {}
func (*CreateBattleACK) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{21}
}
func (m *CreateBattleACK) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateBattleACK) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateBattleACK.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateBattleACK) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateBattleACK.Merge(m, src)
}
func (m *CreateBattleACK) XXX_Size() int {
	return m.Size()
}
func (m *CreateBattleACK) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateBattleACK.DiscardUnknown(m)
}

var xxx_messageInfo_CreateBattleACK proto.InternalMessageInfo

func (m *CreateBattleACK) GetRet() ResultCode {
	if m != nil {
		return m.Ret
	}
	return ResultCode_Success
}

type BattleUint struct {
	Id       int32  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Uid      uint64 `protobuf:"varint,2,opt,name=Uid,proto3" json:"Uid,omitempty"`
	Name     string `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	Team     int32  `protobuf:"varint,4,opt,name=Team,proto3" json:"Team,omitempty"`
	Position int32  `protobuf:"varint,5,opt,name=Position,proto3" json:"Position,omitempty"`
	HP       int64  `protobuf:"varint,6,opt,name=HP,proto3" json:"HP,omitempty"`
	MaxHP    int64  `protobuf:"varint,7,opt,name=MaxHP,proto3" json:"MaxHP,omitempty"`
}

func (m *BattleUint) Reset()         { *m = BattleUint{} }
func (m *BattleUint) String() string { return proto.CompactTextString(m) }
func (*BattleUint) ProtoMessage()    {}
func (*BattleUint) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{22}
}
func (m *BattleUint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BattleUint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BattleUint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BattleUint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BattleUint.Merge(m, src)
}
func (m *BattleUint) XXX_Size() int {
	return m.Size()
}
func (m *BattleUint) XXX_DiscardUnknown() {
	xxx_messageInfo_BattleUint.DiscardUnknown(m)
}

var xxx_messageInfo_BattleUint proto.InternalMessageInfo

func (m *BattleUint) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *BattleUint) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *BattleUint) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BattleUint) GetTeam() int32 {
	if m != nil {
		return m.Team
	}
	return 0
}

func (m *BattleUint) GetPosition() int32 {
	if m != nil {
		return m.Position
	}
	return 0
}

func (m *BattleUint) GetHP() int64 {
	if m != nil {
		return m.HP
	}
	return 0
}

func (m *BattleUint) GetMaxHP() int64 {
	if m != nil {
		return m.MaxHP
	}
	return 0
}

type BattleInfoPUSH struct {
	BattleId uint64        `protobuf:"varint,1,opt,name=BattleId,proto3" json:"BattleId,omitempty"`
	LevelId  int32         `protobuf:"varint,2,opt,name=LevelId,proto3" json:"LevelId,omitempty"`
	Units    []*BattleUint `protobuf:"bytes,3,rep,name=Units,proto3" json:"Units,omitempty"`
}

func (m *BattleInfoPUSH) Reset()         { *m = BattleInfoPUSH{} }
func (m *BattleInfoPUSH) String() string { return proto.CompactTextString(m) }
func (*BattleInfoPUSH) ProtoMessage()    {}
func (*BattleInfoPUSH) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{23}
}
func (m *BattleInfoPUSH) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BattleInfoPUSH) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BattleInfoPUSH.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BattleInfoPUSH) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BattleInfoPUSH.Merge(m, src)
}
func (m *BattleInfoPUSH) XXX_Size() int {
	return m.Size()
}
func (m *BattleInfoPUSH) XXX_DiscardUnknown() {
	xxx_messageInfo_BattleInfoPUSH.DiscardUnknown(m)
}

var xxx_messageInfo_BattleInfoPUSH proto.InternalMessageInfo

func (m *BattleInfoPUSH) GetBattleId() uint64 {
	if m != nil {
		return m.BattleId
	}
	return 0
}

func (m *BattleInfoPUSH) GetLevelId() int32 {
	if m != nil {
		return m.LevelId
	}
	return 0
}

func (m *BattleInfoPUSH) GetUnits() []*BattleUint {
	if m != nil {
		return m.Units
	}
	return nil
}

type BattleStartPUSH struct {
	BattleId uint64 `protobuf:"varint,1,opt,name=BattleId,proto3" json:"BattleId,omitempty"`
}

func (m *BattleStartPUSH) Reset()         { *m = BattleStartPUSH{} }
func (m *BattleStartPUSH) String() string { return proto.CompactTextString(m) }
func (*BattleStartPUSH) ProtoMessage()    {}
func (*BattleStartPUSH) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{24}
}
func (m *BattleStartPUSH) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BattleStartPUSH) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BattleStartPUSH.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BattleStartPUSH) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BattleStartPUSH.Merge(m, src)
}
func (m *BattleStartPUSH) XXX_Size() int {
	return m.Size()
}
func (m *BattleStartPUSH) XXX_DiscardUnknown() {
	xxx_messageInfo_BattleStartPUSH.DiscardUnknown(m)
}

var xxx_messageInfo_BattleStartPUSH proto.InternalMessageInfo

func (m *BattleStartPUSH) GetBattleId() uint64 {
	if m != nil {
		return m.BattleId
	}
	return 0
}

type BattleSkillStart struct {
	Src     int32   `protobuf:"varint,1,opt,name=Src,proto3" json:"Src,omitempty"`
	SkillId int32   `protobuf:"varint,2,opt,name=SkillId,proto3" json:"SkillId,omitempty"`
	Tar     []int32 `protobuf:"varint,3,rep,packed,name=Tar,proto3" json:"Tar,omitempty"`
}

func (m *BattleSkillStart) Reset()         { *m = BattleSkillStart{} }
func (m *BattleSkillStart) String() string { return proto.CompactTextString(m) }
func (*BattleSkillStart) ProtoMessage()    {}
func (*BattleSkillStart) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{25}
}
func (m *BattleSkillStart) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BattleSkillStart) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BattleSkillStart.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BattleSkillStart) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BattleSkillStart.Merge(m, src)
}
func (m *BattleSkillStart) XXX_Size() int {
	return m.Size()
}
func (m *BattleSkillStart) XXX_DiscardUnknown() {
	xxx_messageInfo_BattleSkillStart.DiscardUnknown(m)
}

var xxx_messageInfo_BattleSkillStart proto.InternalMessageInfo

func (m *BattleSkillStart) GetSrc() int32 {
	if m != nil {
		return m.Src
	}
	return 0
}

func (m *BattleSkillStart) GetSkillId() int32 {
	if m != nil {
		return m.SkillId
	}
	return 0
}

func (m *BattleSkillStart) GetTar() []int32 {
	if m != nil {
		return m.Tar
	}
	return nil
}

type BattleSkillEffect struct {
	Src     int32 `protobuf:"varint,1,opt,name=Src,proto3" json:"Src,omitempty"`
	SkillId int32 `protobuf:"varint,2,opt,name=SkillId,proto3" json:"SkillId,omitempty"`
	Tar     int32 `protobuf:"varint,3,opt,name=Tar,proto3" json:"Tar,omitempty"`
	IsHeal  bool  `protobuf:"varint,4,opt,name=IsHeal,proto3" json:"IsHeal,omitempty"`
	Value   int64 `protobuf:"varint,5,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (m *BattleSkillEffect) Reset()         { *m = BattleSkillEffect{} }
func (m *BattleSkillEffect) String() string { return proto.CompactTextString(m) }
func (*BattleSkillEffect) ProtoMessage()    {}
func (*BattleSkillEffect) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{26}
}
func (m *BattleSkillEffect) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BattleSkillEffect) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BattleSkillEffect.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BattleSkillEffect) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BattleSkillEffect.Merge(m, src)
}
func (m *BattleSkillEffect) XXX_Size() int {
	return m.Size()
}
func (m *BattleSkillEffect) XXX_DiscardUnknown() {
	xxx_messageInfo_BattleSkillEffect.DiscardUnknown(m)
}

var xxx_messageInfo_BattleSkillEffect proto.InternalMessageInfo

func (m *BattleSkillEffect) GetSrc() int32 {
	if m != nil {
		return m.Src
	}
	return 0
}

func (m *BattleSkillEffect) GetSkillId() int32 {
	if m != nil {
		return m.SkillId
	}
	return 0
}

func (m *BattleSkillEffect) GetTar() int32 {
	if m != nil {
		return m.Tar
	}
	return 0
}

func (m *BattleSkillEffect) GetIsHeal() bool {
	if m != nil {
		return m.IsHeal
	}
	return false
}

func (m *BattleSkillEffect) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type BattleActionPUSH struct {
	BattleId uint64               `protobuf:"varint,1,opt,name=BattleId,proto3" json:"BattleId,omitempty"`
	Effects  []*BattleSkillEffect `protobuf:"bytes,2,rep,name=Effects,proto3" json:"Effects,omitempty"`
	Skills   []*BattleSkillStart  `protobuf:"bytes,3,rep,name=Skills,proto3" json:"Skills,omitempty"`
}

func (m *BattleActionPUSH) Reset()         { *m = BattleActionPUSH{} }
func (m *BattleActionPUSH) String() string { return proto.CompactTextString(m) }
func (*BattleActionPUSH) ProtoMessage()    {}
func (*BattleActionPUSH) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{27}
}
func (m *BattleActionPUSH) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BattleActionPUSH) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BattleActionPUSH.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BattleActionPUSH) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BattleActionPUSH.Merge(m, src)
}
func (m *BattleActionPUSH) XXX_Size() int {
	return m.Size()
}
func (m *BattleActionPUSH) XXX_DiscardUnknown() {
	xxx_messageInfo_BattleActionPUSH.DiscardUnknown(m)
}

var xxx_messageInfo_BattleActionPUSH proto.InternalMessageInfo

func (m *BattleActionPUSH) GetBattleId() uint64 {
	if m != nil {
		return m.BattleId
	}
	return 0
}

func (m *BattleActionPUSH) GetEffects() []*BattleSkillEffect {
	if m != nil {
		return m.Effects
	}
	return nil
}

func (m *BattleActionPUSH) GetSkills() []*BattleSkillStart {
	if m != nil {
		return m.Skills
	}
	return nil
}

type BattleFinishPUSH struct {
	BattleId uint64 `protobuf:"varint,1,opt,name=BattleId,proto3" json:"BattleId,omitempty"`
	Win      bool   `protobuf:"varint,2,opt,name=Win,proto3" json:"Win,omitempty"`
}

func (m *BattleFinishPUSH) Reset()         { *m = BattleFinishPUSH{} }
func (m *BattleFinishPUSH) String() string { return proto.CompactTextString(m) }
func (*BattleFinishPUSH) ProtoMessage()    {}
func (*BattleFinishPUSH) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{28}
}
func (m *BattleFinishPUSH) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BattleFinishPUSH) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BattleFinishPUSH.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BattleFinishPUSH) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BattleFinishPUSH.Merge(m, src)
}
func (m *BattleFinishPUSH) XXX_Size() int {
	return m.Size()
}
func (m *BattleFinishPUSH) XXX_DiscardUnknown() {
	xxx_messageInfo_BattleFinishPUSH.DiscardUnknown(m)
}

var xxx_messageInfo_BattleFinishPUSH proto.InternalMessageInfo

func (m *BattleFinishPUSH) GetBattleId() uint64 {
	if m != nil {
		return m.BattleId
	}
	return 0
}

func (m *BattleFinishPUSH) GetWin() bool {
	if m != nil {
		return m.Win
	}
	return false
}

type BattleStartREQ struct {
	BattleId uint64 `protobuf:"varint,1,opt,name=BattleId,proto3" json:"BattleId,omitempty"`
}

func (m *BattleStartREQ) Reset()         { *m = BattleStartREQ{} }
func (m *BattleStartREQ) String() string { return proto.CompactTextString(m) }
func (*BattleStartREQ) ProtoMessage()    {}
func (*BattleStartREQ) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{29}
}
func (m *BattleStartREQ) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BattleStartREQ) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BattleStartREQ.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BattleStartREQ) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BattleStartREQ.Merge(m, src)
}
func (m *BattleStartREQ) XXX_Size() int {
	return m.Size()
}
func (m *BattleStartREQ) XXX_DiscardUnknown() {
	xxx_messageInfo_BattleStartREQ.DiscardUnknown(m)
}

var xxx_messageInfo_BattleStartREQ proto.InternalMessageInfo

func (m *BattleStartREQ) GetBattleId() uint64 {
	if m != nil {
		return m.BattleId
	}
	return 0
}

type BattleStartACK struct {
	Ret ResultCode `protobuf:"varint,1,opt,name=Ret,proto3,enum=myproto.ResultCode" json:"Ret,omitempty"`
}

func (m *BattleStartACK) Reset()         { *m = BattleStartACK{} }
func (m *BattleStartACK) String() string { return proto.CompactTextString(m) }
func (*BattleStartACK) ProtoMessage()    {}
func (*BattleStartACK) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{30}
}
func (m *BattleStartACK) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BattleStartACK) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BattleStartACK.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BattleStartACK) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BattleStartACK.Merge(m, src)
}
func (m *BattleStartACK) XXX_Size() int {
	return m.Size()
}
func (m *BattleStartACK) XXX_DiscardUnknown() {
	xxx_messageInfo_BattleStartACK.DiscardUnknown(m)
}

var xxx_messageInfo_BattleStartACK proto.InternalMessageInfo

func (m *BattleStartACK) GetRet() ResultCode {
	if m != nil {
		return m.Ret
	}
	return ResultCode_Success
}

func init() {
	proto.RegisterEnum("myproto.MsgId", MsgId_name, MsgId_value)
	proto.RegisterEnum("myproto.ResultCode", ResultCode_name, ResultCode_value)
	proto.RegisterEnum("myproto.UnitType", UnitType_name, UnitType_value)
	proto.RegisterEnum("myproto.TargetType", TargetType_name, TargetType_value)
	proto.RegisterEnum("myproto.ItemType", ItemType_name, ItemType_value)
	proto.RegisterEnum("myproto.Quality", Quality_name, Quality_value)
	proto.RegisterEnum("myproto.ItemUpdateType", ItemUpdateType_name, ItemUpdateType_value)
	proto.RegisterType((*RegisterREQ)(nil), "myproto.RegisterREQ")
	proto.RegisterType((*RegisterACK)(nil), "myproto.RegisterACK")
	proto.RegisterType((*LoginREQ)(nil), "myproto.LoginREQ")
	proto.RegisterType((*LoginACK)(nil), "myproto.LoginACK")
	proto.RegisterType((*PlayerBagInfo)(nil), "myproto.PlayerBagInfo")
	proto.RegisterMapType((map[int32]*Item)(nil), "myproto.PlayerBagInfo.StackItemsEntry")
	proto.RegisterMapType((map[int32]int64)(nil), "myproto.PlayerBagInfo.UnoccupiedEntry")
	proto.RegisterMapType((map[uint64]*Item)(nil), "myproto.PlayerBagInfo.UnstackItemsEntry")
	proto.RegisterType((*PlayerInfo)(nil), "myproto.PlayerInfo")
	proto.RegisterType((*CreateRoleREQ)(nil), "myproto.CreateRoleREQ")
	proto.RegisterType((*CreateRoleACK)(nil), "myproto.CreateRoleACK")
	proto.RegisterType((*EnterGameREQ)(nil), "myproto.EnterGameREQ")
	proto.RegisterType((*EnterGameACK)(nil), "myproto.EnterGameACK")
	proto.RegisterType((*LogoutREQ)(nil), "myproto.LogoutREQ")
	proto.RegisterType((*LogoutACK)(nil), "myproto.LogoutACK")
	proto.RegisterType((*KickPUSH)(nil), "myproto.KickPUSH")
	proto.RegisterType((*ChatREQ)(nil), "myproto.ChatREQ")
	proto.RegisterType((*ChatACK)(nil), "myproto.ChatACK")
	proto.RegisterType((*ChatPUSH)(nil), "myproto.ChatPUSH")
	proto.RegisterType((*Item)(nil), "myproto.Item")
	proto.RegisterType((*GMREQ)(nil), "myproto.GMREQ")
	proto.RegisterType((*GMACK)(nil), "myproto.GMACK")
	proto.RegisterType((*ItemUpdatePUSH)(nil), "myproto.ItemUpdatePUSH")
	proto.RegisterType((*CreateBattleREQ)(nil), "myproto.CreateBattleREQ")
	proto.RegisterType((*CreateBattleACK)(nil), "myproto.CreateBattleACK")
	proto.RegisterType((*BattleUint)(nil), "myproto.BattleUint")
	proto.RegisterType((*BattleInfoPUSH)(nil), "myproto.BattleInfoPUSH")
	proto.RegisterType((*BattleStartPUSH)(nil), "myproto.BattleStartPUSH")
	proto.RegisterType((*BattleSkillStart)(nil), "myproto.BattleSkillStart")
	proto.RegisterType((*BattleSkillEffect)(nil), "myproto.BattleSkillEffect")
	proto.RegisterType((*BattleActionPUSH)(nil), "myproto.BattleActionPUSH")
	proto.RegisterType((*BattleFinishPUSH)(nil), "myproto.BattleFinishPUSH")
	proto.RegisterType((*BattleStartREQ)(nil), "myproto.BattleStartREQ")
	proto.RegisterType((*BattleStartACK)(nil), "myproto.BattleStartACK")
}

func init() { proto.RegisterFile("msg.proto", fileDescriptor_c06e4cca6c2cc899) }

var fileDescriptor_c06e4cca6c2cc899 = []byte{
	// 1547 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x57, 0xdd, 0x6e, 0xdb, 0xc6,
	0x12, 0x36, 0x49, 0xd1, 0x92, 0x46, 0xb2, 0xb4, 0x5e, 0xe7, 0x24, 0x8a, 0x0f, 0x60, 0x04, 0x0c,
	0xce, 0xa9, 0xeb, 0xb4, 0x6e, 0xea, 0x06, 0x4d, 0x50, 0xa0, 0x45, 0x6c, 0x55, 0xfe, 0x41, 0x2c,
	0x57, 0xa1, 0xec, 0x06, 0x28, 0xd0, 0x06, 0xac, 0xb8, 0xa6, 0x19, 0xf3, 0x47, 0x21, 0xa9, 0x34,
	0xba, 0xea, 0x0b, 0xf4, 0xa2, 0x77, 0xed, 0x13, 0xf4, 0x59, 0x8a, 0x5e, 0xe5, 0xb2, 0x97, 0x45,
	0xf2, 0x1c, 0x05, 0x8a, 0xd9, 0x1f, 0x91, 0x92, 0xdd, 0x24, 0xca, 0x95, 0x76, 0xbe, 0x9d, 0xf9,
	0x66, 0xf6, 0xdb, 0xd9, 0x5d, 0x0a, 0xaa, 0x61, 0xea, 0x6d, 0x0e, 0x93, 0x38, 0x8b, 0x69, 0x39,
	0x1c, 0xf3, 0x81, 0xd5, 0x86, 0x9a, 0xcd, 0x3c, 0x3f, 0xcd, 0x58, 0x62, 0x77, 0x1e, 0xd2, 0x16,
	0x94, 0xb7, 0x07, 0x83, 0x78, 0x14, 0x65, 0x2d, 0xed, 0x86, 0xb6, 0x5e, 0xb5, 0x95, 0x49, 0x57,
	0xa1, 0xd2, 0x73, 0xd2, 0xf4, 0x87, 0x38, 0x71, 0x5b, 0x3a, 0x9f, 0x9a, 0xd8, 0xd6, 0x9d, 0x9c,
	0x64, 0xbb, 0xfd, 0x80, 0xfe, 0x0f, 0x0c, 0x9b, 0x09, 0x82, 0xc6, 0xd6, 0xca, 0xa6, 0x4c, 0xb5,
	0x69, 0xb3, 0x74, 0x14, 0x64, 0xed, 0xd8, 0x65, 0x36, 0xce, 0x5b, 0xf7, 0xa1, 0x72, 0x18, 0x7b,
	0x7e, 0xf4, 0xee, 0x79, 0xbf, 0x95, 0x0c, 0x6f, 0x9f, 0x94, 0x12, 0x30, 0x4e, 0x7c, 0xc1, 0x54,
	0xb2, 0x71, 0x88, 0xa9, 0xf7, 0x9d, 0xd4, 0x8e, 0x03, 0xd6, 0x32, 0x6e, 0x68, 0xeb, 0x15, 0x5b,
	0x99, 0xd6, 0x1f, 0x06, 0x2c, 0xf5, 0x02, 0x67, 0xcc, 0x92, 0x1d, 0xc7, 0x3b, 0x88, 0x4e, 0x63,
	0xba, 0x0b, 0x70, 0x12, 0xc5, 0x83, 0xc1, 0x68, 0xe8, 0x33, 0xb7, 0xa5, 0xdd, 0x30, 0xd6, 0x6b,
	0x5b, 0xff, 0x9f, 0xe4, 0x9a, 0xf2, 0xdd, 0xcc, 0x1d, 0x3b, 0x51, 0x96, 0x8c, 0xed, 0x42, 0x24,
	0xf2, 0xf4, 0x33, 0x67, 0x70, 0x7e, 0x90, 0xb1, 0x30, 0x6d, 0xe9, 0xaf, 0xe5, 0xc9, 0x1d, 0x25,
	0x4f, 0x0e, 0xd0, 0x43, 0xa8, 0x9f, 0x44, 0x69, 0xce, 0x64, 0x70, 0xa6, 0xf5, 0x7f, 0xad, 0x28,
	0x9d, 0xe1, 0x9a, 0x8a, 0x5e, 0xfd, 0x1c, 0x9a, 0x33, 0x45, 0xa3, 0x5c, 0xe7, 0x6c, 0xcc, 0x55,
	0x35, 0x6d, 0x1c, 0xd2, 0x2b, 0x60, 0x3e, 0x73, 0x82, 0x11, 0xe3, 0x12, 0x1a, 0xb6, 0x30, 0x3e,
	0xd3, 0xef, 0x69, 0xab, 0x87, 0xd0, 0x9c, 0xa9, 0xf5, 0x92, 0xf0, 0x9b, 0xc5, 0xf0, 0xda, 0xd6,
	0xd2, 0xa4, 0x54, 0x8c, 0x2a, 0xb2, 0x1d, 0xc1, 0xf2, 0x85, 0x7a, 0x8b, 0x7c, 0xa5, 0xf9, 0xf8,
	0x2c, 0x17, 0x40, 0xa8, 0xc1, 0x37, 0x52, 0xb6, 0x81, 0x96, 0xb7, 0x01, 0x85, 0xd2, 0x91, 0x13,
	0x32, 0xd9, 0x63, 0x7c, 0x4c, 0x6f, 0x43, 0x59, 0x6a, 0xc7, 0x5b, 0xa3, 0xb6, 0x75, 0xf5, 0x72,
	0x65, 0x6d, 0xe5, 0x66, 0xdd, 0x84, 0xa5, 0x76, 0xc2, 0x9c, 0x8c, 0x61, 0x03, 0x61, 0x63, 0x2b,
	0x5a, 0x2d, 0xa7, 0xb5, 0x3e, 0x2d, 0x3a, 0xcd, 0x71, 0x60, 0x1a, 0x50, 0xef, 0x44, 0x19, 0x4b,
	0xf6, 0x9c, 0x10, 0xb9, 0xad, 0xef, 0x0a, 0xf6, 0x1c, 0x47, 0xe0, 0x3d, 0x28, 0xf1, 0x25, 0x09,
	0xc5, 0x56, 0x66, 0x96, 0xc4, 0xd7, 0xc3, 0x1d, 0xac, 0x1a, 0x54, 0x0f, 0x63, 0x2f, 0x1e, 0x65,
	0x98, 0x6c, 0x4b, 0x19, 0x73, 0x14, 0x0c, 0x50, 0x79, 0xe0, 0x0f, 0xce, 0x7b, 0x27, 0xfd, 0x7d,
	0xeb, 0xbf, 0x50, 0x6e, 0x9f, 0x39, 0x48, 0x85, 0xe2, 0x77, 0x53, 0x4f, 0x4a, 0x82, 0x43, 0xeb,
	0xb6, 0x98, 0x9c, 0x83, 0x7a, 0x07, 0x2a, 0x18, 0x81, 0xd4, 0x6f, 0xb9, 0x99, 0x32, 0xab, 0x91,
	0x67, 0xbd, 0x0f, 0x25, 0xec, 0x12, 0xda, 0x00, 0xfd, 0x40, 0x85, 0xeb, 0x07, 0x2e, 0xbd, 0x0a,
	0x8b, 0x88, 0x1f, 0x88, 0x6b, 0xc2, 0xb4, 0xa5, 0x85, 0x0c, 0x47, 0xa3, 0x90, 0x33, 0x18, 0x36,
	0x0e, 0xad, 0xeb, 0x60, 0xee, 0x75, 0xe5, 0x92, 0xda, 0xa1, 0xab, 0x96, 0xd4, 0x0e, 0x5d, 0x6b,
	0x13, 0xa7, 0xe6, 0x58, 0x50, 0x04, 0x0d, 0x4c, 0x73, 0x32, 0x74, 0x9d, 0x8c, 0xf1, 0x65, 0xdd,
	0x05, 0x10, 0xd6, 0xf1, 0x78, 0xc8, 0x64, 0xfc, 0xb5, 0xa9, 0xfe, 0xce, 0xa7, 0xed, 0x82, 0x2b,
	0x9e, 0x89, 0xe2, 0xc5, 0x32, 0x7b, 0x26, 0xf8, 0x9c, 0x75, 0x0b, 0x9a, 0xa2, 0x09, 0x77, 0x9c,
	0x2c, 0x13, 0xbd, 0xda, 0x82, 0xf2, 0x21, 0x7b, 0xc6, 0x02, 0x29, 0x86, 0x69, 0x2b, 0xd3, 0xba,
	0x37, 0xed, 0x3c, 0xc7, 0xb2, 0x7e, 0xd5, 0x00, 0x44, 0xd0, 0x89, 0x1f, 0x65, 0x05, 0xa9, 0x4d,
	0x2e, 0xf5, 0xc5, 0xeb, 0x58, 0x6d, 0x9d, 0x51, 0xd8, 0x3a, 0x0a, 0xa5, 0x63, 0xe6, 0x84, 0xad,
	0x12, 0x8f, 0xe3, 0x63, 0xfe, 0x2e, 0xc4, 0xa9, 0x9f, 0xf9, 0x71, 0xd4, 0x32, 0x39, 0x3e, 0xb1,
	0x31, 0xcb, 0x7e, 0xaf, 0xb5, 0xc8, 0xf7, 0x49, 0xdf, 0xef, 0xe1, 0x9d, 0xd5, 0x75, 0x9e, 0xef,
	0xf7, 0x5a, 0x65, 0x71, 0x67, 0x71, 0xc3, 0x7a, 0x0a, 0x0d, 0x51, 0x19, 0x36, 0x3b, 0x57, 0x7c,
	0x15, 0x2a, 0x12, 0x51, 0xed, 0x30, 0xb1, 0x8b, 0xe2, 0xe8, 0x53, 0xe2, 0xd0, 0xf7, 0xc1, 0x3c,
	0x89, 0xfc, 0x4c, 0xdd, 0xbe, 0xb9, 0x16, 0xf9, 0xba, 0x6d, 0xe1, 0x61, 0x7d, 0x08, 0x4d, 0x01,
	0xf6, 0x33, 0x27, 0xc9, 0xde, 0x94, 0xd3, 0xea, 0x01, 0x91, 0xee, 0xe7, 0x7e, 0x10, 0xf0, 0x18,
	0x54, 0xac, 0x9f, 0x0c, 0xd4, 0x95, 0xda, 0x4f, 0x06, 0x58, 0x19, 0x9f, 0xcf, 0x2b, 0x93, 0x26,
	0xfa, 0x1e, 0x3b, 0x09, 0xaf, 0xcb, 0xb4, 0x71, 0x68, 0xfd, 0x08, 0xcb, 0x05, 0xc6, 0xce, 0xe9,
	0x29, 0x1b, 0xbc, 0x23, 0xa5, 0x26, 0x29, 0xf9, 0x69, 0x49, 0xf7, 0x99, 0x13, 0xf0, 0xed, 0xa9,
	0xd8, 0xd2, 0x42, 0xd1, 0xbf, 0xe6, 0x37, 0xb3, 0x29, 0x44, 0xe7, 0x86, 0xf5, 0x8b, 0xa6, 0xd6,
	0xb4, 0x3d, 0xc0, 0xbd, 0x7a, 0xa3, 0xee, 0x77, 0xa0, 0x2c, 0xca, 0x54, 0xed, 0xbc, 0x3a, 0xa3,
	0x6f, 0x61, 0x25, 0xb6, 0x72, 0xa5, 0x1f, 0xc3, 0x22, 0xc7, 0xd5, 0xa6, 0x5c, 0xbf, 0x2c, 0x88,
	0x0b, 0x6a, 0x4b, 0x47, 0xeb, 0xbe, 0x2a, 0x6c, 0xd7, 0x8f, 0xfc, 0xf4, 0xec, 0x8d, 0x85, 0x11,
	0x30, 0x1e, 0xf9, 0x11, 0xd7, 0xa7, 0x62, 0xe3, 0xd0, 0xfa, 0x40, 0x35, 0x94, 0x20, 0xee, 0x3c,
	0x7c, 0xed, 0xe6, 0xde, 0x9d, 0xf2, 0x7e, 0xfb, 0x23, 0xb5, 0xf1, 0x5b, 0x09, 0xcc, 0x6e, 0xea,
	0x1d, 0xb8, 0xb4, 0x0e, 0x95, 0x6e, 0xea, 0x3d, 0x3e, 0x8a, 0x23, 0x46, 0x16, 0xe8, 0x0a, 0x34,
	0xd1, 0x2a, 0x7c, 0xce, 0x11, 0x6d, 0x16, 0xdc, 0x6e, 0x3f, 0x20, 0x3a, 0x25, 0x50, 0x47, 0x50,
	0x7d, 0x7d, 0x11, 0x63, 0x0a, 0x41, 0x9f, 0x12, 0xfd, 0x0f, 0x2c, 0x23, 0x32, 0xf5, 0x9a, 0x11,
	0xf3, 0x22, 0x8c, 0xde, 0x8b, 0xf4, 0x0a, 0x10, 0x84, 0x8b, 0xcf, 0x13, 0x29, 0x5f, 0x40, 0xd1,
	0xb7, 0x42, 0x97, 0x61, 0x49, 0xe6, 0x12, 0x4f, 0x0b, 0xa9, 0x4e, 0x43, 0xe8, 0x05, 0xaa, 0x22,
	0xf5, 0x7e, 0x90, 0x1a, 0x6d, 0x42, 0x8d, 0xa7, 0x16, 0xaf, 0x08, 0xa9, 0x17, 0x01, 0x8c, 0x59,
	0x52, 0x31, 0xea, 0x61, 0x20, 0x0d, 0xba, 0x04, 0x55, 0x44, 0xf8, 0x25, 0x4d, 0x9a, 0xb9, 0x89,
	0xfe, 0x84, 0x5e, 0x05, 0x8a, 0xe6, 0xf4, 0xbd, 0x4b, 0x96, 0xe9, 0x35, 0x58, 0xc9, 0x17, 0x39,
	0xb9, 0x1f, 0x89, 0x7b, 0xd9, 0x04, 0x32, 0x31, 0xc5, 0x34, 0x7d, 0x9f, 0x90, 0x53, 0x15, 0x30,
	0x73, 0xe8, 0x89, 0x47, 0x5b, 0x70, 0x25, 0x9f, 0xc8, 0x8f, 0x02, 0x39, 0x9b, 0x9e, 0xc9, 0x7b,
	0x91, 0xf8, 0xd3, 0x49, 0x54, 0x8f, 0x91, 0x27, 0x97, 0xe0, 0x58, 0xd4, 0xf9, 0xc6, 0xdf, 0x3a,
	0x40, 0xde, 0x3c, 0xb4, 0x06, 0xe5, 0xfe, 0x68, 0x30, 0x60, 0x69, 0x4a, 0x16, 0x28, 0xc0, 0x62,
	0x37, 0xf5, 0x3a, 0x49, 0x42, 0x34, 0x94, 0x4d, 0x7e, 0x6d, 0x77, 0x9e, 0xfb, 0x69, 0x46, 0x18,
	0x76, 0x8d, 0x44, 0x8e, 0x62, 0x09, 0x9e, 0xe2, 0x26, 0xe1, 0x86, 0xe3, 0x8d, 0x2c, 0x20, 0x0f,
	0x77, 0x40, 0x7d, 0x8c, 0x23, 0xd5, 0x19, 0xa7, 0x0a, 0x12, 0xe6, 0xb8, 0x63, 0xde, 0x4a, 0xc4,
	0x2f, 0x92, 0x87, 0xc3, 0x6c, 0x4c, 0x9e, 0x20, 0xcf, 0x24, 0x88, 0x43, 0xe7, 0xb4, 0x01, 0xa0,
	0x9c, 0x92, 0x84, 0x04, 0x94, 0x42, 0x43, 0xd2, 0xc8, 0x6f, 0x71, 0x12, 0xe2, 0xde, 0x1d, 0x31,
	0xe6, 0x0a, 0xde, 0x08, 0x4b, 0x54, 0xd5, 0x1c, 0x04, 0x01, 0xf3, 0x9c, 0x80, 0xc4, 0x08, 0xe6,
	0x9d, 0xb9, 0xeb, 0xf8, 0x81, 0x4b, 0x86, 0x08, 0x4e, 0x3a, 0x10, 0x31, 0xe6, 0x92, 0xa7, 0x98,
	0x41, 0x7c, 0xef, 0x1c, 0xc5, 0xd9, 0x6e, 0x3c, 0x8a, 0x5c, 0x92, 0x60, 0x61, 0x7b, 0xdd, 0x76,
	0xe8, 0x4e, 0xa0, 0x74, 0x02, 0xf5, 0x9c, 0xc4, 0x09, 0xb1, 0x36, 0xbc, 0x2d, 0xeb, 0x1c, 0xea,
	0x3c, 0x67, 0x03, 0x44, 0x46, 0xa8, 0x7f, 0xb1, 0x23, 0x64, 0x8e, 0x67, 0x1b, 0xb7, 0xa0, 0x82,
	0xd7, 0x3e, 0x7f, 0x93, 0x9b, 0x50, 0xc3, 0x71, 0x37, 0x8e, 0xf0, 0x18, 0x92, 0x05, 0x5c, 0x32,
	0x02, 0xa2, 0x08, 0xa2, 0x6d, 0xfc, 0xa4, 0x03, 0x1c, 0x3b, 0x89, 0xc7, 0x84, 0x7f, 0x43, 0x59,
	0xf2, 0x70, 0x37, 0xa1, 0xd6, 0x89, 0x58, 0x38, 0xee, 0xfb, 0x91, 0x17, 0x30, 0xa2, 0xe1, 0xd9,
	0x2a, 0x00, 0xbb, 0x49, 0x1c, 0x65, 0x44, 0xc7, 0xe3, 0x59, 0x40, 0x77, 0xd8, 0x99, 0x1f, 0xb9,
	0xc4, 0xc0, 0x8b, 0x82, 0xc3, 0xdb, 0x41, 0x40, 0x4a, 0xb8, 0x28, 0x6e, 0xf1, 0x20, 0x84, 0x4c,
	0x94, 0x83, 0x43, 0x22, 0x02, 0xb1, 0xc5, 0xbc, 0x84, 0x3e, 0x0b, 0x4e, 0x09, 0xf0, 0x4d, 0x0a,
	0x02, 0x55, 0x41, 0x8d, 0x37, 0xc9, 0xc4, 0x16, 0x05, 0xd4, 0xb1, 0xac, 0x1c, 0x94, 0xf9, 0x97,
	0xb0, 0xf5, 0x10, 0x45, 0xde, 0x86, 0xe8, 0x91, 0x20, 0xcf, 0xde, 0xc4, 0x82, 0x10, 0xc9, 0x93,
	0x93, 0x8d, 0xc7, 0x50, 0xc1, 0x63, 0xc9, 0xb5, 0x20, 0x50, 0x57, 0x63, 0xa9, 0x06, 0x85, 0x46,
	0xfe, 0x4f, 0x05, 0xe7, 0x88, 0x86, 0xfd, 0x31, 0xf9, 0xfb, 0x41, 0x74, 0x21, 0xf8, 0xe4, 0xff,
	0x03, 0x31, 0x70, 0xbe, 0xf3, 0x74, 0xe4, 0x0f, 0xb9, 0x59, 0xda, 0xb0, 0xa1, 0xfc, 0x70, 0xe4,
	0x04, 0x7e, 0x36, 0x46, 0x57, 0x39, 0x94, 0xf4, 0x55, 0x30, 0x1f, 0x9d, 0xf9, 0x19, 0xca, 0x5c,
	0x05, 0x73, 0x2f, 0x61, 0x2c, 0x22, 0x3a, 0xad, 0x40, 0x69, 0x27, 0x18, 0x31, 0x62, 0xe0, 0xe1,
	0xe9, 0x8d, 0x92, 0x61, 0xc0, 0x48, 0x09, 0xc7, 0x5f, 0x25, 0x4e, 0xe4, 0x31, 0x62, 0x6e, 0x7c,
	0x51, 0xfc, 0x86, 0xe3, 0xa5, 0xd3, 0x22, 0x22, 0xd9, 0x6b, 0x50, 0x46, 0x6c, 0xdb, 0x75, 0x89,
	0xa6, 0x8c, 0x2f, 0x59, 0x40, 0xf4, 0x9d, 0x9b, 0xbf, 0xbf, 0x5c, 0xd3, 0x5e, 0xbc, 0x5c, 0xd3,
	0xfe, 0x7a, 0xb9, 0xa6, 0xfd, 0xfc, 0x6a, 0x6d, 0xe1, 0xc5, 0xab, 0xb5, 0x85, 0x3f, 0x5f, 0xad,
	0x2d, 0x7c, 0x53, 0xdd, 0xfc, 0x48, 0x3e, 0x07, 0xdf, 0x2f, 0xf2, 0x9f, 0x4f, 0xfe, 0x09, 0x00,
	0x00, 0xff, 0xff, 0xe7, 0xf8, 0xfe, 0x75, 0xce, 0x0f, 0x00, 0x00,
}

func (m *RegisterREQ) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterREQ) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterREQ) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegisterACK) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterACK) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterACK) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ret != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.Ret))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LoginREQ) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginREQ) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoginREQ) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LoginACK) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginACK) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoginACK) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HasRole {
		i--
		if m.HasRole {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Uid != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x10
	}
	if m.Ret != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.Ret))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PlayerBagInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerBagInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerBagInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UnstackItems) > 0 {
		for k := range m.UnstackItems {
			v := m.UnstackItems[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintMsg(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintMsg(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintMsg(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.StackItems) > 0 {
		for k := range m.StackItems {
			v := m.StackItems[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintMsg(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintMsg(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintMsg(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Unoccupied) > 0 {
		for k := range m.Unoccupied {
			v := m.Unoccupied[k]
			baseI := i
			i = encodeVarintMsg(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintMsg(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintMsg(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PlayerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BagInfo != nil {
		{
			size, err := m.BagInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsg(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Uid != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateRoleREQ) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateRoleREQ) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateRoleREQ) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateRoleACK) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateRoleACK) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateRoleACK) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ret != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.Ret))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EnterGameREQ) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnterGameREQ) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnterGameREQ) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *EnterGameACK) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnterGameACK) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnterGameACK) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsg(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Ret != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.Ret))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LogoutREQ) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogoutREQ) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogoutREQ) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *LogoutACK) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogoutACK) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogoutACK) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ret != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.Ret))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *KickPUSH) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KickPUSH) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KickPUSH) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ChatREQ) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatREQ) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChatREQ) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChatACK) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatACK) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChatACK) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ret != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.Ret))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ChatPUSH) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatPUSH) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChatPUSH) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Uid != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Item) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Item) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Item) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Num != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.Num))
		i--
		dAtA[i] = 0x18
	}
	if m.ItemId != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ItemId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GMREQ) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GMREQ) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GMREQ) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cmd) > 0 {
		i -= len(m.Cmd)
		copy(dAtA[i:], m.Cmd)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Cmd)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GMACK) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GMACK) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GMACK) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ret != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.Ret))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ItemUpdatePUSH) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ItemUpdatePUSH) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ItemUpdatePUSH) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMsg(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.UpdateType != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.UpdateType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateBattleREQ) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateBattleREQ) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateBattleREQ) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LevelId != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.LevelId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateBattleACK) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateBattleACK) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateBattleACK) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ret != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.Ret))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BattleUint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BattleUint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BattleUint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxHP != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.MaxHP))
		i--
		dAtA[i] = 0x38
	}
	if m.HP != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.HP))
		i--
		dAtA[i] = 0x30
	}
	if m.Position != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.Position))
		i--
		dAtA[i] = 0x28
	}
	if m.Team != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.Team))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Uid != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BattleInfoPUSH) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BattleInfoPUSH) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BattleInfoPUSH) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Units) > 0 {
		for iNdEx := len(m.Units) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Units[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMsg(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.LevelId != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.LevelId))
		i--
		dAtA[i] = 0x10
	}
	if m.BattleId != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.BattleId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BattleStartPUSH) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BattleStartPUSH) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BattleStartPUSH) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BattleId != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.BattleId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BattleSkillStart) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BattleSkillStart) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BattleSkillStart) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tar) > 0 {
		dAtA6 := make([]byte, len(m.Tar)*10)
		var j5 int
		for _, num1 := range m.Tar {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintMsg(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x1a
	}
	if m.SkillId != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.SkillId))
		i--
		dAtA[i] = 0x10
	}
	if m.Src != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.Src))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BattleSkillEffect) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BattleSkillEffect) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BattleSkillEffect) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x28
	}
	if m.IsHeal {
		i--
		if m.IsHeal {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Tar != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.Tar))
		i--
		dAtA[i] = 0x18
	}
	if m.SkillId != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.SkillId))
		i--
		dAtA[i] = 0x10
	}
	if m.Src != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.Src))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BattleActionPUSH) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BattleActionPUSH) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BattleActionPUSH) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Skills) > 0 {
		for iNdEx := len(m.Skills) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Skills[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMsg(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Effects) > 0 {
		for iNdEx := len(m.Effects) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Effects[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMsg(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.BattleId != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.BattleId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BattleFinishPUSH) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BattleFinishPUSH) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BattleFinishPUSH) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Win {
		i--
		if m.Win {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.BattleId != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.BattleId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BattleStartREQ) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BattleStartREQ) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BattleStartREQ) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BattleId != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.BattleId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BattleStartACK) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BattleStartACK) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BattleStartACK) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ret != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.Ret))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMsg(dAtA []byte, offset int, v uint64) int {
	offset -= sovMsg(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RegisterREQ) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}

func (m *RegisterACK) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ret != 0 {
		n += 1 + sovMsg(uint64(m.Ret))
	}
	return n
}

func (m *LoginREQ) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}

func (m *LoginACK) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ret != 0 {
		n += 1 + sovMsg(uint64(m.Ret))
	}
	if m.Uid != 0 {
		n += 1 + sovMsg(uint64(m.Uid))
	}
	if m.HasRole {
		n += 2
	}
	return n
}

func (m *PlayerBagInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Unoccupied) > 0 {
		for k, v := range m.Unoccupied {
			_ = k
			_ = v
			mapEntrySize := 1 + sovMsg(uint64(k)) + 1 + sovMsg(uint64(v))
			n += mapEntrySize + 1 + sovMsg(uint64(mapEntrySize))
		}
	}
	if len(m.StackItems) > 0 {
		for k, v := range m.StackItems {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovMsg(uint64(l))
			}
			mapEntrySize := 1 + sovMsg(uint64(k)) + l
			n += mapEntrySize + 1 + sovMsg(uint64(mapEntrySize))
		}
	}
	if len(m.UnstackItems) > 0 {
		for k, v := range m.UnstackItems {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovMsg(uint64(l))
			}
			mapEntrySize := 1 + sovMsg(uint64(k)) + l
			n += mapEntrySize + 1 + sovMsg(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *PlayerInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovMsg(uint64(m.Uid))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	if m.BagInfo != nil {
		l = m.BagInfo.Size()
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}

func (m *CreateRoleREQ) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}

func (m *CreateRoleACK) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ret != 0 {
		n += 1 + sovMsg(uint64(m.Ret))
	}
	return n
}

func (m *EnterGameREQ) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *EnterGameACK) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ret != 0 {
		n += 1 + sovMsg(uint64(m.Ret))
	}
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}

func (m *LogoutREQ) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *LogoutACK) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ret != 0 {
		n += 1 + sovMsg(uint64(m.Ret))
	}
	return n
}

func (m *KickPUSH) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ChatREQ) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}

func (m *ChatACK) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ret != 0 {
		n += 1 + sovMsg(uint64(m.Ret))
	}
	return n
}

func (m *ChatPUSH) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovMsg(uint64(m.Uid))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}

func (m *Item) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMsg(uint64(m.Id))
	}
	if m.ItemId != 0 {
		n += 1 + sovMsg(uint64(m.ItemId))
	}
	if m.Num != 0 {
		n += 1 + sovMsg(uint64(m.Num))
	}
	return n
}

func (m *GMREQ) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Cmd)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}

func (m *GMACK) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ret != 0 {
		n += 1 + sovMsg(uint64(m.Ret))
	}
	return n
}

func (m *ItemUpdatePUSH) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateType != 0 {
		n += 1 + sovMsg(uint64(m.UpdateType))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovMsg(uint64(l))
		}
	}
	return n
}

func (m *CreateBattleREQ) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LevelId != 0 {
		n += 1 + sovMsg(uint64(m.LevelId))
	}
	return n
}

func (m *CreateBattleACK) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ret != 0 {
		n += 1 + sovMsg(uint64(m.Ret))
	}
	return n
}

func (m *BattleUint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMsg(uint64(m.Id))
	}
	if m.Uid != 0 {
		n += 1 + sovMsg(uint64(m.Uid))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	if m.Team != 0 {
		n += 1 + sovMsg(uint64(m.Team))
	}
	if m.Position != 0 {
		n += 1 + sovMsg(uint64(m.Position))
	}
	if m.HP != 0 {
		n += 1 + sovMsg(uint64(m.HP))
	}
	if m.MaxHP != 0 {
		n += 1 + sovMsg(uint64(m.MaxHP))
	}
	return n
}

func (m *BattleInfoPUSH) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BattleId != 0 {
		n += 1 + sovMsg(uint64(m.BattleId))
	}
	if m.LevelId != 0 {
		n += 1 + sovMsg(uint64(m.LevelId))
	}
	if len(m.Units) > 0 {
		for _, e := range m.Units {
			l = e.Size()
			n += 1 + l + sovMsg(uint64(l))
		}
	}
	return n
}

func (m *BattleStartPUSH) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BattleId != 0 {
		n += 1 + sovMsg(uint64(m.BattleId))
	}
	return n
}

func (m *BattleSkillStart) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Src != 0 {
		n += 1 + sovMsg(uint64(m.Src))
	}
	if m.SkillId != 0 {
		n += 1 + sovMsg(uint64(m.SkillId))
	}
	if len(m.Tar) > 0 {
		l = 0
		for _, e := range m.Tar {
			l += sovMsg(uint64(e))
		}
		n += 1 + sovMsg(uint64(l)) + l
	}
	return n
}

func (m *BattleSkillEffect) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Src != 0 {
		n += 1 + sovMsg(uint64(m.Src))
	}
	if m.SkillId != 0 {
		n += 1 + sovMsg(uint64(m.SkillId))
	}
	if m.Tar != 0 {
		n += 1 + sovMsg(uint64(m.Tar))
	}
	if m.IsHeal {
		n += 2
	}
	if m.Value != 0 {
		n += 1 + sovMsg(uint64(m.Value))
	}
	return n
}

func (m *BattleActionPUSH) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BattleId != 0 {
		n += 1 + sovMsg(uint64(m.BattleId))
	}
	if len(m.Effects) > 0 {
		for _, e := range m.Effects {
			l = e.Size()
			n += 1 + l + sovMsg(uint64(l))
		}
	}
	if len(m.Skills) > 0 {
		for _, e := range m.Skills {
			l = e.Size()
			n += 1 + l + sovMsg(uint64(l))
		}
	}
	return n
}

func (m *BattleFinishPUSH) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BattleId != 0 {
		n += 1 + sovMsg(uint64(m.BattleId))
	}
	if m.Win {
		n += 2
	}
	return n
}

func (m *BattleStartREQ) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BattleId != 0 {
		n += 1 + sovMsg(uint64(m.BattleId))
	}
	return n
}

func (m *BattleStartACK) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ret != 0 {
		n += 1 + sovMsg(uint64(m.Ret))
	}
	return n
}

func sovMsg(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMsg(x uint64) (n int) {
	return sovMsg(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RegisterREQ) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterREQ: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterREQ: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterACK) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterACK: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterACK: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ret", wireType)
			}
			m.Ret = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ret |= ResultCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginREQ) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginREQ: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginREQ: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginACK) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginACK: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginACK: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ret", wireType)
			}
			m.Ret = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ret |= ResultCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasRole", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasRole = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerBagInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerBagInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerBagInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unoccupied", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Unoccupied == nil {
				m.Unoccupied = make(map[int32]int64)
			}
			var mapkey int32
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMsg
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMsg
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMsg(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthMsg
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Unoccupied[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StackItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StackItems == nil {
				m.StackItems = make(map[int32]*Item)
			}
			var mapkey int32
			var mapvalue *Item
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMsg
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMsg
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthMsg
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthMsg
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Item{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMsg(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthMsg
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.StackItems[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnstackItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UnstackItems == nil {
				m.UnstackItems = make(map[uint64]*Item)
			}
			var mapkey uint64
			var mapvalue *Item
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMsg
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMsg
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthMsg
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthMsg
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Item{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMsg(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthMsg
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.UnstackItems[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BagInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BagInfo == nil {
				m.BagInfo = &PlayerBagInfo{}
			}
			if err := m.BagInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateRoleREQ) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateRoleREQ: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateRoleREQ: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateRoleACK) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateRoleACK: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateRoleACK: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ret", wireType)
			}
			m.Ret = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ret |= ResultCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnterGameREQ) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnterGameREQ: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnterGameREQ: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnterGameACK) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnterGameACK: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnterGameACK: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ret", wireType)
			}
			m.Ret = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ret |= ResultCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &PlayerInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogoutREQ) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogoutREQ: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogoutREQ: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogoutACK) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogoutACK: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogoutACK: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ret", wireType)
			}
			m.Ret = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ret |= ResultCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KickPUSH) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KickPUSH: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KickPUSH: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatREQ) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatREQ: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatREQ: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatACK) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatACK: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatACK: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ret", wireType)
			}
			m.Ret = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ret |= ResultCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatPUSH) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatPUSH: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatPUSH: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Item) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Item: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Item: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			m.ItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GMREQ) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GMREQ: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GMREQ: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cmd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cmd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GMACK) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GMACK: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GMACK: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ret", wireType)
			}
			m.Ret = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ret |= ResultCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ItemUpdatePUSH) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ItemUpdatePUSH: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ItemUpdatePUSH: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateType", wireType)
			}
			m.UpdateType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateType |= ItemUpdateType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Item{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateBattleREQ) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateBattleREQ: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateBattleREQ: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LevelId", wireType)
			}
			m.LevelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LevelId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateBattleACK) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateBattleACK: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateBattleACK: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ret", wireType)
			}
			m.Ret = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ret |= ResultCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BattleUint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BattleUint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BattleUint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Team", wireType)
			}
			m.Team = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Team |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			m.Position = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Position |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HP", wireType)
			}
			m.HP = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HP |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxHP", wireType)
			}
			m.MaxHP = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxHP |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BattleInfoPUSH) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BattleInfoPUSH: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BattleInfoPUSH: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleId", wireType)
			}
			m.BattleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LevelId", wireType)
			}
			m.LevelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LevelId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Units", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Units = append(m.Units, &BattleUint{})
			if err := m.Units[len(m.Units)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BattleStartPUSH) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BattleStartPUSH: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BattleStartPUSH: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleId", wireType)
			}
			m.BattleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BattleSkillStart) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BattleSkillStart: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BattleSkillStart: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Src", wireType)
			}
			m.Src = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Src |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillId", wireType)
			}
			m.SkillId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkillId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Tar = append(m.Tar, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMsg
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMsg
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Tar) == 0 {
					m.Tar = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMsg
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Tar = append(m.Tar, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Tar", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BattleSkillEffect) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BattleSkillEffect: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BattleSkillEffect: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Src", wireType)
			}
			m.Src = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Src |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillId", wireType)
			}
			m.SkillId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkillId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tar", wireType)
			}
			m.Tar = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tar |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsHeal", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsHeal = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BattleActionPUSH) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BattleActionPUSH: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BattleActionPUSH: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleId", wireType)
			}
			m.BattleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Effects", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Effects = append(m.Effects, &BattleSkillEffect{})
			if err := m.Effects[len(m.Effects)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Skills", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Skills = append(m.Skills, &BattleSkillStart{})
			if err := m.Skills[len(m.Skills)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BattleFinishPUSH) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BattleFinishPUSH: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BattleFinishPUSH: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleId", wireType)
			}
			m.BattleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Win", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Win = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BattleStartREQ) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BattleStartREQ: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BattleStartREQ: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleId", wireType)
			}
			m.BattleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BattleStartACK) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BattleStartACK: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BattleStartACK: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ret", wireType)
			}
			m.Ret = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ret |= ResultCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsg(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMsg
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMsg
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMsg
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMsg        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsg          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMsg = fmt.Errorf("proto: unexpected end of group")
)
