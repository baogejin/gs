// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: msg.proto

package myproto

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgId int32

const (
	MsgId_Msg_None          MsgId = 0
	MsgId_Msg_RegisterREQ   MsgId = 1
	MsgId_Msg_RegisterACK   MsgId = 2
	MsgId_Msg_LoginREQ      MsgId = 3
	MsgId_Msg_LoginACK      MsgId = 4
	MsgId_Msg_CreateRoleREQ MsgId = 5
	MsgId_Msg_CreateRoleACK MsgId = 6
	MsgId_Msg_EnterGameREQ  MsgId = 7
	MsgId_Msg_EnterGameACK  MsgId = 8
	MsgId_Msg_LogoutREQ     MsgId = 9
	MsgId_Msg_LogoutACK     MsgId = 10
	MsgId_Msg_KickPUSH      MsgId = 11
)

var MsgId_name = map[int32]string{
	0:  "Msg_None",
	1:  "Msg_RegisterREQ",
	2:  "Msg_RegisterACK",
	3:  "Msg_LoginREQ",
	4:  "Msg_LoginACK",
	5:  "Msg_CreateRoleREQ",
	6:  "Msg_CreateRoleACK",
	7:  "Msg_EnterGameREQ",
	8:  "Msg_EnterGameACK",
	9:  "Msg_LogoutREQ",
	10: "Msg_LogoutACK",
	11: "Msg_KickPUSH",
}

var MsgId_value = map[string]int32{
	"Msg_None":          0,
	"Msg_RegisterREQ":   1,
	"Msg_RegisterACK":   2,
	"Msg_LoginREQ":      3,
	"Msg_LoginACK":      4,
	"Msg_CreateRoleREQ": 5,
	"Msg_CreateRoleACK": 6,
	"Msg_EnterGameREQ":  7,
	"Msg_EnterGameACK":  8,
	"Msg_LogoutREQ":     9,
	"Msg_LogoutACK":     10,
	"Msg_KickPUSH":      11,
}

func (x MsgId) String() string {
	return proto.EnumName(MsgId_name, int32(x))
}

func (MsgId) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{0}
}

type ResultCode int32

const (
	ResultCode_Success         ResultCode = 0
	ResultCode_MsgErr          ResultCode = 1
	ResultCode_AccountExist    ResultCode = 101
	ResultCode_AccountNotExist ResultCode = 102
	ResultCode_RoleNameExist   ResultCode = 103
	ResultCode_PasswordErr     ResultCode = 104
	ResultCode_AlreadyLogin    ResultCode = 105
	ResultCode_AccountEmpty    ResultCode = 106
	ResultCode_PasswordEmpty   ResultCode = 107
	ResultCode_AccountErr      ResultCode = 108
	ResultCode_AlreadyHasRole  ResultCode = 109
	ResultCode_NeedLogin       ResultCode = 110
	ResultCode_RoleNameIllegal ResultCode = 111
	ResultCode_CreateRoleFaild ResultCode = 112
	ResultCode_EnterGameFailed ResultCode = 113
)

var ResultCode_name = map[int32]string{
	0:   "Success",
	1:   "MsgErr",
	101: "AccountExist",
	102: "AccountNotExist",
	103: "RoleNameExist",
	104: "PasswordErr",
	105: "AlreadyLogin",
	106: "AccountEmpty",
	107: "PasswordEmpty",
	108: "AccountErr",
	109: "AlreadyHasRole",
	110: "NeedLogin",
	111: "RoleNameIllegal",
	112: "CreateRoleFaild",
	113: "EnterGameFailed",
}

var ResultCode_value = map[string]int32{
	"Success":         0,
	"MsgErr":          1,
	"AccountExist":    101,
	"AccountNotExist": 102,
	"RoleNameExist":   103,
	"PasswordErr":     104,
	"AlreadyLogin":    105,
	"AccountEmpty":    106,
	"PasswordEmpty":   107,
	"AccountErr":      108,
	"AlreadyHasRole":  109,
	"NeedLogin":       110,
	"RoleNameIllegal": 111,
	"CreateRoleFaild": 112,
	"EnterGameFailed": 113,
}

func (x ResultCode) String() string {
	return proto.EnumName(ResultCode_name, int32(x))
}

func (ResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{1}
}

type RegisterREQ struct {
	Account  string `protobuf:"bytes,1,opt,name=Account,proto3" json:"Account,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=Password,proto3" json:"Password,omitempty"`
}

func (m *RegisterREQ) Reset()         { *m = RegisterREQ{} }
func (m *RegisterREQ) String() string { return proto.CompactTextString(m) }
func (*RegisterREQ) ProtoMessage()    {}
func (*RegisterREQ) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{0}
}
func (m *RegisterREQ) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterREQ) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterREQ.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterREQ) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterREQ.Merge(m, src)
}
func (m *RegisterREQ) XXX_Size() int {
	return m.Size()
}
func (m *RegisterREQ) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterREQ.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterREQ proto.InternalMessageInfo

func (m *RegisterREQ) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *RegisterREQ) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type RegisterACK struct {
	Ret ResultCode `protobuf:"varint,1,opt,name=Ret,proto3,enum=myproto.ResultCode" json:"Ret,omitempty"`
}

func (m *RegisterACK) Reset()         { *m = RegisterACK{} }
func (m *RegisterACK) String() string { return proto.CompactTextString(m) }
func (*RegisterACK) ProtoMessage()    {}
func (*RegisterACK) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{1}
}
func (m *RegisterACK) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterACK) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterACK.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterACK) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterACK.Merge(m, src)
}
func (m *RegisterACK) XXX_Size() int {
	return m.Size()
}
func (m *RegisterACK) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterACK.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterACK proto.InternalMessageInfo

func (m *RegisterACK) GetRet() ResultCode {
	if m != nil {
		return m.Ret
	}
	return ResultCode_Success
}

type LoginREQ struct {
	Account  string `protobuf:"bytes,1,opt,name=Account,proto3" json:"Account,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=Password,proto3" json:"Password,omitempty"`
}

func (m *LoginREQ) Reset()         { *m = LoginREQ{} }
func (m *LoginREQ) String() string { return proto.CompactTextString(m) }
func (*LoginREQ) ProtoMessage()    {}
func (*LoginREQ) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{2}
}
func (m *LoginREQ) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginREQ) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginREQ.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoginREQ) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginREQ.Merge(m, src)
}
func (m *LoginREQ) XXX_Size() int {
	return m.Size()
}
func (m *LoginREQ) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginREQ.DiscardUnknown(m)
}

var xxx_messageInfo_LoginREQ proto.InternalMessageInfo

func (m *LoginREQ) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *LoginREQ) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type LoginACK struct {
	Ret     ResultCode `protobuf:"varint,1,opt,name=Ret,proto3,enum=myproto.ResultCode" json:"Ret,omitempty"`
	Uid     uint64     `protobuf:"varint,2,opt,name=Uid,proto3" json:"Uid,omitempty"`
	HasRole bool       `protobuf:"varint,3,opt,name=HasRole,proto3" json:"HasRole,omitempty"`
}

func (m *LoginACK) Reset()         { *m = LoginACK{} }
func (m *LoginACK) String() string { return proto.CompactTextString(m) }
func (*LoginACK) ProtoMessage()    {}
func (*LoginACK) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{3}
}
func (m *LoginACK) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginACK) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginACK.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoginACK) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginACK.Merge(m, src)
}
func (m *LoginACK) XXX_Size() int {
	return m.Size()
}
func (m *LoginACK) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginACK.DiscardUnknown(m)
}

var xxx_messageInfo_LoginACK proto.InternalMessageInfo

func (m *LoginACK) GetRet() ResultCode {
	if m != nil {
		return m.Ret
	}
	return ResultCode_Success
}

func (m *LoginACK) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *LoginACK) GetHasRole() bool {
	if m != nil {
		return m.HasRole
	}
	return false
}

type PlayerInfo struct {
	Uid  uint64 `protobuf:"varint,1,opt,name=Uid,proto3" json:"Uid,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (m *PlayerInfo) Reset()         { *m = PlayerInfo{} }
func (m *PlayerInfo) String() string { return proto.CompactTextString(m) }
func (*PlayerInfo) ProtoMessage()    {}
func (*PlayerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{4}
}
func (m *PlayerInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerInfo.Merge(m, src)
}
func (m *PlayerInfo) XXX_Size() int {
	return m.Size()
}
func (m *PlayerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerInfo proto.InternalMessageInfo

func (m *PlayerInfo) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *PlayerInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type CreateRoleREQ struct {
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (m *CreateRoleREQ) Reset()         { *m = CreateRoleREQ{} }
func (m *CreateRoleREQ) String() string { return proto.CompactTextString(m) }
func (*CreateRoleREQ) ProtoMessage()    {}
func (*CreateRoleREQ) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{5}
}
func (m *CreateRoleREQ) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateRoleREQ) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateRoleREQ.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateRoleREQ) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRoleREQ.Merge(m, src)
}
func (m *CreateRoleREQ) XXX_Size() int {
	return m.Size()
}
func (m *CreateRoleREQ) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRoleREQ.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRoleREQ proto.InternalMessageInfo

func (m *CreateRoleREQ) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type CreateRoleACK struct {
	Ret ResultCode `protobuf:"varint,1,opt,name=Ret,proto3,enum=myproto.ResultCode" json:"Ret,omitempty"`
}

func (m *CreateRoleACK) Reset()         { *m = CreateRoleACK{} }
func (m *CreateRoleACK) String() string { return proto.CompactTextString(m) }
func (*CreateRoleACK) ProtoMessage()    {}
func (*CreateRoleACK) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{6}
}
func (m *CreateRoleACK) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateRoleACK) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateRoleACK.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateRoleACK) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRoleACK.Merge(m, src)
}
func (m *CreateRoleACK) XXX_Size() int {
	return m.Size()
}
func (m *CreateRoleACK) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRoleACK.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRoleACK proto.InternalMessageInfo

func (m *CreateRoleACK) GetRet() ResultCode {
	if m != nil {
		return m.Ret
	}
	return ResultCode_Success
}

type EnterGameREQ struct {
}

func (m *EnterGameREQ) Reset()         { *m = EnterGameREQ{} }
func (m *EnterGameREQ) String() string { return proto.CompactTextString(m) }
func (*EnterGameREQ) ProtoMessage()    {}
func (*EnterGameREQ) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{7}
}
func (m *EnterGameREQ) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnterGameREQ) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EnterGameREQ.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EnterGameREQ) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnterGameREQ.Merge(m, src)
}
func (m *EnterGameREQ) XXX_Size() int {
	return m.Size()
}
func (m *EnterGameREQ) XXX_DiscardUnknown() {
	xxx_messageInfo_EnterGameREQ.DiscardUnknown(m)
}

var xxx_messageInfo_EnterGameREQ proto.InternalMessageInfo

type EnterGameACK struct {
	Ret  ResultCode  `protobuf:"varint,1,opt,name=Ret,proto3,enum=myproto.ResultCode" json:"Ret,omitempty"`
	Info *PlayerInfo `protobuf:"bytes,2,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (m *EnterGameACK) Reset()         { *m = EnterGameACK{} }
func (m *EnterGameACK) String() string { return proto.CompactTextString(m) }
func (*EnterGameACK) ProtoMessage()    {}
func (*EnterGameACK) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{8}
}
func (m *EnterGameACK) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnterGameACK) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EnterGameACK.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EnterGameACK) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnterGameACK.Merge(m, src)
}
func (m *EnterGameACK) XXX_Size() int {
	return m.Size()
}
func (m *EnterGameACK) XXX_DiscardUnknown() {
	xxx_messageInfo_EnterGameACK.DiscardUnknown(m)
}

var xxx_messageInfo_EnterGameACK proto.InternalMessageInfo

func (m *EnterGameACK) GetRet() ResultCode {
	if m != nil {
		return m.Ret
	}
	return ResultCode_Success
}

func (m *EnterGameACK) GetInfo() *PlayerInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

type LogoutREQ struct {
}

func (m *LogoutREQ) Reset()         { *m = LogoutREQ{} }
func (m *LogoutREQ) String() string { return proto.CompactTextString(m) }
func (*LogoutREQ) ProtoMessage()    {}
func (*LogoutREQ) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{9}
}
func (m *LogoutREQ) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogoutREQ) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogoutREQ.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogoutREQ) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogoutREQ.Merge(m, src)
}
func (m *LogoutREQ) XXX_Size() int {
	return m.Size()
}
func (m *LogoutREQ) XXX_DiscardUnknown() {
	xxx_messageInfo_LogoutREQ.DiscardUnknown(m)
}

var xxx_messageInfo_LogoutREQ proto.InternalMessageInfo

type LogoutACK struct {
	Ret ResultCode `protobuf:"varint,1,opt,name=Ret,proto3,enum=myproto.ResultCode" json:"Ret,omitempty"`
}

func (m *LogoutACK) Reset()         { *m = LogoutACK{} }
func (m *LogoutACK) String() string { return proto.CompactTextString(m) }
func (*LogoutACK) ProtoMessage()    {}
func (*LogoutACK) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{10}
}
func (m *LogoutACK) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogoutACK) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogoutACK.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogoutACK) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogoutACK.Merge(m, src)
}
func (m *LogoutACK) XXX_Size() int {
	return m.Size()
}
func (m *LogoutACK) XXX_DiscardUnknown() {
	xxx_messageInfo_LogoutACK.DiscardUnknown(m)
}

var xxx_messageInfo_LogoutACK proto.InternalMessageInfo

func (m *LogoutACK) GetRet() ResultCode {
	if m != nil {
		return m.Ret
	}
	return ResultCode_Success
}

type KickPUSH struct {
}

func (m *KickPUSH) Reset()         { *m = KickPUSH{} }
func (m *KickPUSH) String() string { return proto.CompactTextString(m) }
func (*KickPUSH) ProtoMessage()    {}
func (*KickPUSH) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{11}
}
func (m *KickPUSH) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KickPUSH) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KickPUSH.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KickPUSH) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KickPUSH.Merge(m, src)
}
func (m *KickPUSH) XXX_Size() int {
	return m.Size()
}
func (m *KickPUSH) XXX_DiscardUnknown() {
	xxx_messageInfo_KickPUSH.DiscardUnknown(m)
}

var xxx_messageInfo_KickPUSH proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("myproto.MsgId", MsgId_name, MsgId_value)
	proto.RegisterEnum("myproto.ResultCode", ResultCode_name, ResultCode_value)
	proto.RegisterType((*RegisterREQ)(nil), "myproto.RegisterREQ")
	proto.RegisterType((*RegisterACK)(nil), "myproto.RegisterACK")
	proto.RegisterType((*LoginREQ)(nil), "myproto.LoginREQ")
	proto.RegisterType((*LoginACK)(nil), "myproto.LoginACK")
	proto.RegisterType((*PlayerInfo)(nil), "myproto.PlayerInfo")
	proto.RegisterType((*CreateRoleREQ)(nil), "myproto.CreateRoleREQ")
	proto.RegisterType((*CreateRoleACK)(nil), "myproto.CreateRoleACK")
	proto.RegisterType((*EnterGameREQ)(nil), "myproto.EnterGameREQ")
	proto.RegisterType((*EnterGameACK)(nil), "myproto.EnterGameACK")
	proto.RegisterType((*LogoutREQ)(nil), "myproto.LogoutREQ")
	proto.RegisterType((*LogoutACK)(nil), "myproto.LogoutACK")
	proto.RegisterType((*KickPUSH)(nil), "myproto.KickPUSH")
}

func init() { proto.RegisterFile("msg.proto", fileDescriptor_c06e4cca6c2cc899) }

var fileDescriptor_c06e4cca6c2cc899 = []byte{
	// 563 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xcd, 0x36, 0x69, 0x63, 0x8f, 0x9b, 0x74, 0xbb, 0x05, 0x29, 0xe2, 0x60, 0x55, 0xae, 0x10,
	0x55, 0x0f, 0x41, 0x0a, 0x88, 0x33, 0x21, 0x0a, 0x34, 0x4a, 0x13, 0x05, 0x57, 0xbd, 0x20, 0x01,
	0x32, 0xf1, 0xd6, 0x98, 0xda, 0xde, 0xb0, 0xeb, 0x08, 0xf2, 0x17, 0x5c, 0xf9, 0x23, 0x8e, 0x3d,
	0x72, 0x44, 0xc9, 0x37, 0x70, 0x47, 0xe3, 0x78, 0x13, 0x87, 0x5e, 0x08, 0x27, 0xef, 0xbc, 0x7d,
	0xf3, 0x66, 0xe6, 0x79, 0x16, 0xcc, 0x58, 0x05, 0xcd, 0x89, 0x14, 0xa9, 0x60, 0xd5, 0x78, 0x96,
	0x1d, 0x9c, 0x0e, 0x58, 0x2e, 0x0f, 0x42, 0x95, 0x72, 0xe9, 0x76, 0x5f, 0xb3, 0x06, 0x54, 0xdb,
	0xe3, 0xb1, 0x98, 0x26, 0x69, 0x83, 0x1c, 0x93, 0x53, 0xd3, 0xd5, 0x21, 0x7b, 0x00, 0xc6, 0xc8,
	0x53, 0xea, 0x8b, 0x90, 0x7e, 0x63, 0x27, 0xbb, 0x5a, 0xc5, 0xce, 0xd3, 0xb5, 0x48, 0xbb, 0xd3,
	0x67, 0x0f, 0xa1, 0xec, 0xf2, 0xa5, 0x40, 0xbd, 0x75, 0xd4, 0xcc, 0x4b, 0x35, 0x5d, 0xae, 0xa6,
	0x51, 0xda, 0x11, 0x3e, 0x77, 0xf1, 0xde, 0x79, 0x0e, 0xc6, 0x85, 0x08, 0xc2, 0xe4, 0xff, 0xeb,
	0xbe, 0xcd, 0x15, 0xfe, 0xbd, 0x28, 0xa3, 0x50, 0xbe, 0x0a, 0x97, 0x4a, 0x15, 0x17, 0x8f, 0x58,
	0xfa, 0xdc, 0x53, 0xae, 0x88, 0x78, 0xa3, 0x7c, 0x4c, 0x4e, 0x0d, 0x57, 0x87, 0x4e, 0x0b, 0x60,
	0x14, 0x79, 0x33, 0x2e, 0x7b, 0xc9, 0xb5, 0xd0, 0x99, 0x64, 0x9d, 0xc9, 0xa0, 0x32, 0xf4, 0x62,
	0x9e, 0xb7, 0x95, 0x9d, 0x9d, 0x13, 0xa8, 0x75, 0x24, 0xf7, 0x52, 0x8e, 0x0a, 0x38, 0x99, 0x26,
	0x91, 0x02, 0xe9, 0x59, 0x91, 0xb4, 0x85, 0x63, 0x75, 0xd8, 0xef, 0x26, 0x29, 0x97, 0xaf, 0xbc,
	0x18, 0xb5, 0x9d, 0x77, 0x85, 0x78, 0x0b, 0x0f, 0x1e, 0x41, 0x05, 0x27, 0xca, 0xfa, 0xb6, 0x0a,
	0xbc, 0xf5, 0xb0, 0x6e, 0x46, 0x70, 0x2c, 0x30, 0x2f, 0x44, 0x20, 0xa6, 0x29, 0x16, 0x6b, 0xe9,
	0x60, 0x8b, 0x86, 0x01, 0x8c, 0x7e, 0x38, 0xbe, 0x19, 0x5d, 0x5d, 0x9e, 0x9f, 0xfd, 0x26, 0xb0,
	0x3b, 0x50, 0x41, 0xcf, 0x67, 0xfb, 0x60, 0x0c, 0x54, 0xf0, 0x7e, 0x28, 0x12, 0x4e, 0x4b, 0xec,
	0x08, 0x0e, 0x30, 0x2a, 0x6c, 0x21, 0x25, 0x7f, 0x83, 0xed, 0x4e, 0x9f, 0xee, 0x30, 0x0a, 0xfb,
	0x08, 0xea, 0xa5, 0xa1, 0xe5, 0x0d, 0x04, 0x39, 0x15, 0x76, 0x1f, 0x0e, 0x11, 0xd9, 0xf8, 0x07,
	0x74, 0xf7, 0x2e, 0x8c, 0xec, 0x3d, 0x76, 0x0f, 0x28, 0xc2, 0x45, 0x53, 0x69, 0xf5, 0x0e, 0x8a,
	0x5c, 0x83, 0x1d, 0x42, 0x2d, 0xaf, 0xb5, 0x34, 0x84, 0x9a, 0x9b, 0x10, 0xb2, 0x40, 0x77, 0xa4,
	0xa7, 0xa6, 0xd6, 0xd9, 0xf7, 0x1d, 0x80, 0xb5, 0x2f, 0xcc, 0x82, 0xea, 0xe5, 0x74, 0x3c, 0xe6,
	0x4a, 0xd1, 0x12, 0x03, 0xd8, 0x1b, 0xa8, 0xa0, 0x2b, 0x25, 0x25, 0x98, 0x99, 0xef, 0x7c, 0xf7,
	0x6b, 0xa8, 0x52, 0xca, 0xd1, 0x84, 0x1c, 0x19, 0x8a, 0x1c, 0xbc, 0xc6, 0x9a, 0xd8, 0x3f, 0xee,
	0xd1, 0x12, 0x0a, 0xd8, 0x01, 0x58, 0xfa, 0x49, 0xa0, 0xd4, 0xc7, 0x4c, 0x2a, 0x92, 0xdc, 0xf3,
	0x67, 0x99, 0x33, 0x34, 0x2c, 0x8a, 0xc7, 0x93, 0x74, 0x46, 0x3f, 0xa1, 0xce, 0x2a, 0x29, 0x83,
	0x6e, 0x58, 0x1d, 0x40, 0x93, 0xa4, 0xa4, 0x11, 0x63, 0x50, 0xcf, 0x65, 0xf2, 0x17, 0x41, 0x63,
	0x56, 0x03, 0x73, 0xc8, 0xb9, 0xbf, 0xd4, 0x4d, 0xb0, 0x45, 0xdd, 0x4d, 0x2f, 0x8a, 0x78, 0xe0,
	0x45, 0x54, 0x20, 0xb8, 0x36, 0xfa, 0xa5, 0x17, 0x46, 0x3e, 0x9d, 0x20, 0xb8, 0x32, 0x14, 0x31,
	0xee, 0xd3, 0xcf, 0x2f, 0x4e, 0x7e, 0xcc, 0x6d, 0x72, 0x3b, 0xb7, 0xc9, 0xaf, 0xb9, 0x4d, 0xbe,
	0x2d, 0xec, 0xd2, 0xed, 0xc2, 0x2e, 0xfd, 0x5c, 0xd8, 0xa5, 0x37, 0x66, 0xf3, 0x71, 0xbe, 0x54,
	0x1f, 0xf6, 0xb2, 0xcf, 0x93, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xc7, 0x1f, 0x17, 0x86, 0xbf,
	0x04, 0x00, 0x00,
}

func (m *RegisterREQ) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterREQ) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterREQ) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegisterACK) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterACK) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterACK) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ret != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.Ret))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LoginREQ) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginREQ) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoginREQ) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LoginACK) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginACK) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoginACK) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HasRole {
		i--
		if m.HasRole {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Uid != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x10
	}
	if m.Ret != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.Ret))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PlayerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Uid != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateRoleREQ) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateRoleREQ) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateRoleREQ) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateRoleACK) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateRoleACK) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateRoleACK) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ret != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.Ret))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EnterGameREQ) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnterGameREQ) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnterGameREQ) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *EnterGameACK) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnterGameACK) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnterGameACK) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsg(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Ret != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.Ret))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LogoutREQ) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogoutREQ) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogoutREQ) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *LogoutACK) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogoutACK) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogoutACK) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ret != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.Ret))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *KickPUSH) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KickPUSH) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KickPUSH) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintMsg(dAtA []byte, offset int, v uint64) int {
	offset -= sovMsg(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RegisterREQ) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}

func (m *RegisterACK) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ret != 0 {
		n += 1 + sovMsg(uint64(m.Ret))
	}
	return n
}

func (m *LoginREQ) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}

func (m *LoginACK) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ret != 0 {
		n += 1 + sovMsg(uint64(m.Ret))
	}
	if m.Uid != 0 {
		n += 1 + sovMsg(uint64(m.Uid))
	}
	if m.HasRole {
		n += 2
	}
	return n
}

func (m *PlayerInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovMsg(uint64(m.Uid))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}

func (m *CreateRoleREQ) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}

func (m *CreateRoleACK) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ret != 0 {
		n += 1 + sovMsg(uint64(m.Ret))
	}
	return n
}

func (m *EnterGameREQ) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *EnterGameACK) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ret != 0 {
		n += 1 + sovMsg(uint64(m.Ret))
	}
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}

func (m *LogoutREQ) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *LogoutACK) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ret != 0 {
		n += 1 + sovMsg(uint64(m.Ret))
	}
	return n
}

func (m *KickPUSH) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovMsg(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMsg(x uint64) (n int) {
	return sovMsg(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RegisterREQ) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterREQ: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterREQ: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterACK) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterACK: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterACK: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ret", wireType)
			}
			m.Ret = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ret |= ResultCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginREQ) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginREQ: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginREQ: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginACK) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginACK: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginACK: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ret", wireType)
			}
			m.Ret = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ret |= ResultCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasRole", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasRole = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateRoleREQ) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateRoleREQ: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateRoleREQ: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateRoleACK) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateRoleACK: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateRoleACK: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ret", wireType)
			}
			m.Ret = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ret |= ResultCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnterGameREQ) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnterGameREQ: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnterGameREQ: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnterGameACK) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnterGameACK: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnterGameACK: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ret", wireType)
			}
			m.Ret = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ret |= ResultCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &PlayerInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogoutREQ) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogoutREQ: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogoutREQ: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogoutACK) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogoutACK: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogoutACK: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ret", wireType)
			}
			m.Ret = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ret |= ResultCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KickPUSH) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KickPUSH: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KickPUSH: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsg(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMsg
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMsg
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMsg
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMsg        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsg          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMsg = fmt.Errorf("proto: unexpected end of group")
)
